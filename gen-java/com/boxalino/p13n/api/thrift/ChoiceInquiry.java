/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChoiceInquiry implements org.apache.thrift.TBase<ChoiceInquiry, ChoiceInquiry._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChoiceInquiry");

  private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIMPLE_SEARCH_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleSearchQuery", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("minHitCount", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChoiceInquiryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChoiceInquiryTupleSchemeFactory());
  }

  public String choiceId; // required
  public SimpleSearchQuery simpleSearchQuery; // required
  public Map<String,List<String>> params; // required
  public int minHitCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHOICE_ID((short)1, "choiceId"),
    SIMPLE_SEARCH_QUERY((short)2, "simpleSearchQuery"),
    PARAMS((short)3, "params"),
    MIN_HIT_COUNT((short)4, "minHitCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHOICE_ID
          return CHOICE_ID;
        case 2: // SIMPLE_SEARCH_QUERY
          return SIMPLE_SEARCH_QUERY;
        case 3: // PARAMS
          return PARAMS;
        case 4: // MIN_HIT_COUNT
          return MIN_HIT_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINHITCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIMPLE_SEARCH_QUERY, new org.apache.thrift.meta_data.FieldMetaData("simpleSearchQuery", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleSearchQuery.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.MIN_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("minHitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChoiceInquiry.class, metaDataMap);
  }

  public ChoiceInquiry() {
  }

  public ChoiceInquiry(
    String choiceId,
    SimpleSearchQuery simpleSearchQuery,
    Map<String,List<String>> params,
    int minHitCount)
  {
    this();
    this.choiceId = choiceId;
    this.simpleSearchQuery = simpleSearchQuery;
    this.params = params;
    this.minHitCount = minHitCount;
    setMinHitCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChoiceInquiry(ChoiceInquiry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChoiceId()) {
      this.choiceId = other.choiceId;
    }
    if (other.isSetSimpleSearchQuery()) {
      this.simpleSearchQuery = new SimpleSearchQuery(other.simpleSearchQuery);
    }
    if (other.isSetParams()) {
      Map<String,List<String>> __this__params = new HashMap<String,List<String>>();
      for (Map.Entry<String, List<String>> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        List<String> __this__params_copy_value = new ArrayList<String>();
        for (String other_element_value_element : other_element_value) {
          __this__params_copy_value.add(other_element_value_element);
        }

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
    this.minHitCount = other.minHitCount;
  }

  public ChoiceInquiry deepCopy() {
    return new ChoiceInquiry(this);
  }

  @Override
  public void clear() {
    this.choiceId = null;
    this.simpleSearchQuery = null;
    this.params = null;
    setMinHitCountIsSet(false);
    this.minHitCount = 0;
  }

  public String getChoiceId() {
    return this.choiceId;
  }

  public ChoiceInquiry setChoiceId(String choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  public void unsetChoiceId() {
    this.choiceId = null;
  }

  /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceId() {
    return this.choiceId != null;
  }

  public void setChoiceIdIsSet(boolean value) {
    if (!value) {
      this.choiceId = null;
    }
  }

  public SimpleSearchQuery getSimpleSearchQuery() {
    return this.simpleSearchQuery;
  }

  public ChoiceInquiry setSimpleSearchQuery(SimpleSearchQuery simpleSearchQuery) {
    this.simpleSearchQuery = simpleSearchQuery;
    return this;
  }

  public void unsetSimpleSearchQuery() {
    this.simpleSearchQuery = null;
  }

  /** Returns true if field simpleSearchQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleSearchQuery() {
    return this.simpleSearchQuery != null;
  }

  public void setSimpleSearchQueryIsSet(boolean value) {
    if (!value) {
      this.simpleSearchQuery = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, List<String> val) {
    if (this.params == null) {
      this.params = new HashMap<String,List<String>>();
    }
    this.params.put(key, val);
  }

  public Map<String,List<String>> getParams() {
    return this.params;
  }

  public ChoiceInquiry setParams(Map<String,List<String>> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public int getMinHitCount() {
    return this.minHitCount;
  }

  public ChoiceInquiry setMinHitCount(int minHitCount) {
    this.minHitCount = minHitCount;
    setMinHitCountIsSet(true);
    return this;
  }

  public void unsetMinHitCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID);
  }

  /** Returns true if field minHitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinHitCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID);
  }

  public void setMinHitCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINHITCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHOICE_ID:
      if (value == null) {
        unsetChoiceId();
      } else {
        setChoiceId((String)value);
      }
      break;

    case SIMPLE_SEARCH_QUERY:
      if (value == null) {
        unsetSimpleSearchQuery();
      } else {
        setSimpleSearchQuery((SimpleSearchQuery)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,List<String>>)value);
      }
      break;

    case MIN_HIT_COUNT:
      if (value == null) {
        unsetMinHitCount();
      } else {
        setMinHitCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHOICE_ID:
      return getChoiceId();

    case SIMPLE_SEARCH_QUERY:
      return getSimpleSearchQuery();

    case PARAMS:
      return getParams();

    case MIN_HIT_COUNT:
      return Integer.valueOf(getMinHitCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHOICE_ID:
      return isSetChoiceId();
    case SIMPLE_SEARCH_QUERY:
      return isSetSimpleSearchQuery();
    case PARAMS:
      return isSetParams();
    case MIN_HIT_COUNT:
      return isSetMinHitCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChoiceInquiry)
      return this.equals((ChoiceInquiry)that);
    return false;
  }

  public boolean equals(ChoiceInquiry that) {
    if (that == null)
      return false;

    boolean this_present_choiceId = true && this.isSetChoiceId();
    boolean that_present_choiceId = true && that.isSetChoiceId();
    if (this_present_choiceId || that_present_choiceId) {
      if (!(this_present_choiceId && that_present_choiceId))
        return false;
      if (!this.choiceId.equals(that.choiceId))
        return false;
    }

    boolean this_present_simpleSearchQuery = true && this.isSetSimpleSearchQuery();
    boolean that_present_simpleSearchQuery = true && that.isSetSimpleSearchQuery();
    if (this_present_simpleSearchQuery || that_present_simpleSearchQuery) {
      if (!(this_present_simpleSearchQuery && that_present_simpleSearchQuery))
        return false;
      if (!this.simpleSearchQuery.equals(that.simpleSearchQuery))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_minHitCount = true;
    boolean that_present_minHitCount = true;
    if (this_present_minHitCount || that_present_minHitCount) {
      if (!(this_present_minHitCount && that_present_minHitCount))
        return false;
      if (this.minHitCount != that.minHitCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ChoiceInquiry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ChoiceInquiry typedOther = (ChoiceInquiry)other;

    lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(typedOther.isSetChoiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, typedOther.choiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimpleSearchQuery()).compareTo(typedOther.isSetSimpleSearchQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleSearchQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleSearchQuery, typedOther.simpleSearchQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinHitCount()).compareTo(typedOther.isSetMinHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minHitCount, typedOther.minHitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChoiceInquiry(");
    boolean first = true;

    sb.append("choiceId:");
    if (this.choiceId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simpleSearchQuery:");
    if (this.simpleSearchQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleSearchQuery);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minHitCount:");
    sb.append(this.minHitCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (simpleSearchQuery != null) {
      simpleSearchQuery.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChoiceInquiryStandardSchemeFactory implements SchemeFactory {
    public ChoiceInquiryStandardScheme getScheme() {
      return new ChoiceInquiryStandardScheme();
    }
  }

  private static class ChoiceInquiryStandardScheme extends StandardScheme<ChoiceInquiry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHOICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceId = iprot.readString();
              struct.setChoiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIMPLE_SEARCH_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.simpleSearchQuery = new SimpleSearchQuery();
              struct.simpleSearchQuery.read(iprot);
              struct.setSimpleSearchQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.params = new HashMap<String,List<String>>(2*_map48.size);
                for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                {
                  String _key50; // required
                  List<String> _val51; // required
                  _key50 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                    _val51 = new ArrayList<String>(_list52.size);
                    for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                    {
                      String _elem54; // required
                      _elem54 = iprot.readString();
                      _val51.add(_elem54);
                    }
                    iprot.readListEnd();
                  }
                  struct.params.put(_key50, _val51);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minHitCount = iprot.readI32();
              struct.setMinHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.choiceId != null) {
        oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
        oprot.writeString(struct.choiceId);
        oprot.writeFieldEnd();
      }
      if (struct.simpleSearchQuery != null) {
        oprot.writeFieldBegin(SIMPLE_SEARCH_QUERY_FIELD_DESC);
        struct.simpleSearchQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.params.size()));
          for (Map.Entry<String, List<String>> _iter55 : struct.params.entrySet())
          {
            oprot.writeString(_iter55.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter55.getValue().size()));
              for (String _iter56 : _iter55.getValue())
              {
                oprot.writeString(_iter56);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_HIT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.minHitCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChoiceInquiryTupleSchemeFactory implements SchemeFactory {
    public ChoiceInquiryTupleScheme getScheme() {
      return new ChoiceInquiryTupleScheme();
    }
  }

  private static class ChoiceInquiryTupleScheme extends TupleScheme<ChoiceInquiry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChoiceId()) {
        optionals.set(0);
      }
      if (struct.isSetSimpleSearchQuery()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetMinHitCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChoiceId()) {
        oprot.writeString(struct.choiceId);
      }
      if (struct.isSetSimpleSearchQuery()) {
        struct.simpleSearchQuery.write(oprot);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (Map.Entry<String, List<String>> _iter57 : struct.params.entrySet())
          {
            oprot.writeString(_iter57.getKey());
            {
              oprot.writeI32(_iter57.getValue().size());
              for (String _iter58 : _iter57.getValue())
              {
                oprot.writeString(_iter58);
              }
            }
          }
        }
      }
      if (struct.isSetMinHitCount()) {
        oprot.writeI32(struct.minHitCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChoiceInquiry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.choiceId = iprot.readString();
        struct.setChoiceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.simpleSearchQuery = new SimpleSearchQuery();
        struct.simpleSearchQuery.read(iprot);
        struct.setSimpleSearchQueryIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map59 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.params = new HashMap<String,List<String>>(2*_map59.size);
          for (int _i60 = 0; _i60 < _map59.size; ++_i60)
          {
            String _key61; // required
            List<String> _val62; // required
            _key61 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val62 = new ArrayList<String>(_list63.size);
              for (int _i64 = 0; _i64 < _list63.size; ++_i64)
              {
                String _elem65; // required
                _elem65 = iprot.readString();
                _val62.add(_elem65);
              }
            }
            struct.params.put(_key61, _val62);
          }
        }
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minHitCount = iprot.readI32();
        struct.setMinHitCountIsSet(true);
      }
    }
  }

}

