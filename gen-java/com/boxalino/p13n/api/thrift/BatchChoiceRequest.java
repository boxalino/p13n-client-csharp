/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BatchChoiceRequest implements org.apache.thrift.TBase<BatchChoiceRequest, BatchChoiceRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchChoiceRequest");

  private static final org.apache.thrift.protocol.TField AUTHENTICATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("authenticationToken", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHOICE_INQUIRY_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceInquiry", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("requestContext", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PROFILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileIds", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BatchChoiceRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BatchChoiceRequestTupleSchemeFactory());
  }

  public String authenticationToken; // required
  public ChoiceInquiry choiceInquiry; // required
  public RequestContext requestContext; // required
  public List<String> profileIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
    CHOICE_INQUIRY((short)2, "choiceInquiry"),
    REQUEST_CONTEXT((short)3, "requestContext"),
    PROFILE_IDS((short)4, "profileIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTHENTICATION_TOKEN
          return AUTHENTICATION_TOKEN;
        case 2: // CHOICE_INQUIRY
          return CHOICE_INQUIRY;
        case 3: // REQUEST_CONTEXT
          return REQUEST_CONTEXT;
        case 4: // PROFILE_IDS
          return PROFILE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("authenticationToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOICE_INQUIRY, new org.apache.thrift.meta_data.FieldMetaData("choiceInquiry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceInquiry.class)));
    tmpMap.put(_Fields.REQUEST_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("requestContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestContext.class)));
    tmpMap.put(_Fields.PROFILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("profileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchChoiceRequest.class, metaDataMap);
  }

  public BatchChoiceRequest() {
  }

  public BatchChoiceRequest(
    String authenticationToken,
    ChoiceInquiry choiceInquiry,
    RequestContext requestContext,
    List<String> profileIds)
  {
    this();
    this.authenticationToken = authenticationToken;
    this.choiceInquiry = choiceInquiry;
    this.requestContext = requestContext;
    this.profileIds = profileIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchChoiceRequest(BatchChoiceRequest other) {
    if (other.isSetAuthenticationToken()) {
      this.authenticationToken = other.authenticationToken;
    }
    if (other.isSetChoiceInquiry()) {
      this.choiceInquiry = new ChoiceInquiry(other.choiceInquiry);
    }
    if (other.isSetRequestContext()) {
      this.requestContext = new RequestContext(other.requestContext);
    }
    if (other.isSetProfileIds()) {
      List<String> __this__profileIds = new ArrayList<String>();
      for (String other_element : other.profileIds) {
        __this__profileIds.add(other_element);
      }
      this.profileIds = __this__profileIds;
    }
  }

  public BatchChoiceRequest deepCopy() {
    return new BatchChoiceRequest(this);
  }

  @Override
  public void clear() {
    this.authenticationToken = null;
    this.choiceInquiry = null;
    this.requestContext = null;
    this.profileIds = null;
  }

  public String getAuthenticationToken() {
    return this.authenticationToken;
  }

  public BatchChoiceRequest setAuthenticationToken(String authenticationToken) {
    this.authenticationToken = authenticationToken;
    return this;
  }

  public void unsetAuthenticationToken() {
    this.authenticationToken = null;
  }

  /** Returns true if field authenticationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthenticationToken() {
    return this.authenticationToken != null;
  }

  public void setAuthenticationTokenIsSet(boolean value) {
    if (!value) {
      this.authenticationToken = null;
    }
  }

  public ChoiceInquiry getChoiceInquiry() {
    return this.choiceInquiry;
  }

  public BatchChoiceRequest setChoiceInquiry(ChoiceInquiry choiceInquiry) {
    this.choiceInquiry = choiceInquiry;
    return this;
  }

  public void unsetChoiceInquiry() {
    this.choiceInquiry = null;
  }

  /** Returns true if field choiceInquiry is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceInquiry() {
    return this.choiceInquiry != null;
  }

  public void setChoiceInquiryIsSet(boolean value) {
    if (!value) {
      this.choiceInquiry = null;
    }
  }

  public RequestContext getRequestContext() {
    return this.requestContext;
  }

  public BatchChoiceRequest setRequestContext(RequestContext requestContext) {
    this.requestContext = requestContext;
    return this;
  }

  public void unsetRequestContext() {
    this.requestContext = null;
  }

  /** Returns true if field requestContext is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestContext() {
    return this.requestContext != null;
  }

  public void setRequestContextIsSet(boolean value) {
    if (!value) {
      this.requestContext = null;
    }
  }

  public int getProfileIdsSize() {
    return (this.profileIds == null) ? 0 : this.profileIds.size();
  }

  public java.util.Iterator<String> getProfileIdsIterator() {
    return (this.profileIds == null) ? null : this.profileIds.iterator();
  }

  public void addToProfileIds(String elem) {
    if (this.profileIds == null) {
      this.profileIds = new ArrayList<String>();
    }
    this.profileIds.add(elem);
  }

  public List<String> getProfileIds() {
    return this.profileIds;
  }

  public BatchChoiceRequest setProfileIds(List<String> profileIds) {
    this.profileIds = profileIds;
    return this;
  }

  public void unsetProfileIds() {
    this.profileIds = null;
  }

  /** Returns true if field profileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileIds() {
    return this.profileIds != null;
  }

  public void setProfileIdsIsSet(boolean value) {
    if (!value) {
      this.profileIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AUTHENTICATION_TOKEN:
      if (value == null) {
        unsetAuthenticationToken();
      } else {
        setAuthenticationToken((String)value);
      }
      break;

    case CHOICE_INQUIRY:
      if (value == null) {
        unsetChoiceInquiry();
      } else {
        setChoiceInquiry((ChoiceInquiry)value);
      }
      break;

    case REQUEST_CONTEXT:
      if (value == null) {
        unsetRequestContext();
      } else {
        setRequestContext((RequestContext)value);
      }
      break;

    case PROFILE_IDS:
      if (value == null) {
        unsetProfileIds();
      } else {
        setProfileIds((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTHENTICATION_TOKEN:
      return getAuthenticationToken();

    case CHOICE_INQUIRY:
      return getChoiceInquiry();

    case REQUEST_CONTEXT:
      return getRequestContext();

    case PROFILE_IDS:
      return getProfileIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AUTHENTICATION_TOKEN:
      return isSetAuthenticationToken();
    case CHOICE_INQUIRY:
      return isSetChoiceInquiry();
    case REQUEST_CONTEXT:
      return isSetRequestContext();
    case PROFILE_IDS:
      return isSetProfileIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchChoiceRequest)
      return this.equals((BatchChoiceRequest)that);
    return false;
  }

  public boolean equals(BatchChoiceRequest that) {
    if (that == null)
      return false;

    boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
    boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
    if (this_present_authenticationToken || that_present_authenticationToken) {
      if (!(this_present_authenticationToken && that_present_authenticationToken))
        return false;
      if (!this.authenticationToken.equals(that.authenticationToken))
        return false;
    }

    boolean this_present_choiceInquiry = true && this.isSetChoiceInquiry();
    boolean that_present_choiceInquiry = true && that.isSetChoiceInquiry();
    if (this_present_choiceInquiry || that_present_choiceInquiry) {
      if (!(this_present_choiceInquiry && that_present_choiceInquiry))
        return false;
      if (!this.choiceInquiry.equals(that.choiceInquiry))
        return false;
    }

    boolean this_present_requestContext = true && this.isSetRequestContext();
    boolean that_present_requestContext = true && that.isSetRequestContext();
    if (this_present_requestContext || that_present_requestContext) {
      if (!(this_present_requestContext && that_present_requestContext))
        return false;
      if (!this.requestContext.equals(that.requestContext))
        return false;
    }

    boolean this_present_profileIds = true && this.isSetProfileIds();
    boolean that_present_profileIds = true && that.isSetProfileIds();
    if (this_present_profileIds || that_present_profileIds) {
      if (!(this_present_profileIds && that_present_profileIds))
        return false;
      if (!this.profileIds.equals(that.profileIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BatchChoiceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BatchChoiceRequest typedOther = (BatchChoiceRequest)other;

    lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthenticationToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoiceInquiry()).compareTo(typedOther.isSetChoiceInquiry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceInquiry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceInquiry, typedOther.choiceInquiry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestContext()).compareTo(typedOther.isSetRequestContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestContext, typedOther.requestContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileIds()).compareTo(typedOther.isSetProfileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileIds, typedOther.profileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchChoiceRequest(");
    boolean first = true;

    sb.append("authenticationToken:");
    if (this.authenticationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.authenticationToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceInquiry:");
    if (this.choiceInquiry == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceInquiry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestContext:");
    if (this.requestContext == null) {
      sb.append("null");
    } else {
      sb.append(this.requestContext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileIds:");
    if (this.profileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.profileIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (choiceInquiry != null) {
      choiceInquiry.validate();
    }
    if (requestContext != null) {
      requestContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchChoiceRequestStandardSchemeFactory implements SchemeFactory {
    public BatchChoiceRequestStandardScheme getScheme() {
      return new BatchChoiceRequestStandardScheme();
    }
  }

  private static class BatchChoiceRequestStandardScheme extends StandardScheme<BatchChoiceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authenticationToken = iprot.readString();
              struct.setAuthenticationTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOICE_INQUIRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.choiceInquiry = new ChoiceInquiry();
              struct.choiceInquiry.read(iprot);
              struct.setChoiceInquiryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestContext = new RequestContext();
              struct.requestContext.read(iprot);
              struct.setRequestContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROFILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.profileIds = new ArrayList<String>(_list142.size);
                for (int _i143 = 0; _i143 < _list142.size; ++_i143)
                {
                  String _elem144; // required
                  _elem144 = iprot.readString();
                  struct.profileIds.add(_elem144);
                }
                iprot.readListEnd();
              }
              struct.setProfileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(struct.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (struct.choiceInquiry != null) {
        oprot.writeFieldBegin(CHOICE_INQUIRY_FIELD_DESC);
        struct.choiceInquiry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.requestContext != null) {
        oprot.writeFieldBegin(REQUEST_CONTEXT_FIELD_DESC);
        struct.requestContext.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.profileIds != null) {
        oprot.writeFieldBegin(PROFILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.profileIds.size()));
          for (String _iter145 : struct.profileIds)
          {
            oprot.writeString(_iter145);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchChoiceRequestTupleSchemeFactory implements SchemeFactory {
    public BatchChoiceRequestTupleScheme getScheme() {
      return new BatchChoiceRequestTupleScheme();
    }
  }

  private static class BatchChoiceRequestTupleScheme extends TupleScheme<BatchChoiceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAuthenticationToken()) {
        optionals.set(0);
      }
      if (struct.isSetChoiceInquiry()) {
        optionals.set(1);
      }
      if (struct.isSetRequestContext()) {
        optionals.set(2);
      }
      if (struct.isSetProfileIds()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAuthenticationToken()) {
        oprot.writeString(struct.authenticationToken);
      }
      if (struct.isSetChoiceInquiry()) {
        struct.choiceInquiry.write(oprot);
      }
      if (struct.isSetRequestContext()) {
        struct.requestContext.write(oprot);
      }
      if (struct.isSetProfileIds()) {
        {
          oprot.writeI32(struct.profileIds.size());
          for (String _iter146 : struct.profileIds)
          {
            oprot.writeString(_iter146);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchChoiceRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.authenticationToken = iprot.readString();
        struct.setAuthenticationTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.choiceInquiry = new ChoiceInquiry();
        struct.choiceInquiry.read(iprot);
        struct.setChoiceInquiryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestContext = new RequestContext();
        struct.requestContext.read(iprot);
        struct.setRequestContextIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list147 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.profileIds = new ArrayList<String>(_list147.size);
          for (int _i148 = 0; _i148 < _list147.size; ++_i148)
          {
            String _elem149; // required
            _elem149 = iprot.readString();
            struct.profileIds.add(_elem149);
          }
        }
        struct.setProfileIdsIsSet(true);
      }
    }
  }

}

