/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SimpleSearchQuery implements org.apache.thrift.TBase<SimpleSearchQuery, SimpleSearchQuery._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleSearchQuery");

  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("indexId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryText", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OR_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orFilters", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField FACET_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("facetRequests", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField SORT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFields", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("hitCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RETURN_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFields", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleSearchQueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleSearchQueryTupleSchemeFactory());
  }

  public String indexId; // required
  public String language; // required
  public String queryText; // required
  public List<Filter> filters; // required
  public boolean orFilters; // required
  public List<FacetRequest> facetRequests; // required
  public List<SortField> sortFields; // required
  public long offset; // required
  public int hitCount; // required
  public List<String> returnFields; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_ID((short)1, "indexId"),
    LANGUAGE((short)2, "language"),
    QUERY_TEXT((short)3, "queryText"),
    FILTERS((short)4, "filters"),
    OR_FILTERS((short)5, "orFilters"),
    FACET_REQUESTS((short)6, "facetRequests"),
    SORT_FIELDS((short)7, "sortFields"),
    OFFSET((short)8, "offset"),
    HIT_COUNT((short)9, "hitCount"),
    RETURN_FIELDS((short)10, "returnFields");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_ID
          return INDEX_ID;
        case 2: // LANGUAGE
          return LANGUAGE;
        case 3: // QUERY_TEXT
          return QUERY_TEXT;
        case 4: // FILTERS
          return FILTERS;
        case 5: // OR_FILTERS
          return OR_FILTERS;
        case 6: // FACET_REQUESTS
          return FACET_REQUESTS;
        case 7: // SORT_FIELDS
          return SORT_FIELDS;
        case 8: // OFFSET
          return OFFSET;
        case 9: // HIT_COUNT
          return HIT_COUNT;
        case 10: // RETURN_FIELDS
          return RETURN_FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORFILTERS_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __HITCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("indexId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("queryText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Filter.class))));
    tmpMap.put(_Fields.OR_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("orFilters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FACET_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("facetRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FacetRequest.class))));
    tmpMap.put(_Fields.SORT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("sortFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SortField.class))));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("hitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("returnFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleSearchQuery.class, metaDataMap);
  }

  public SimpleSearchQuery() {
  }

  public SimpleSearchQuery(
    String indexId,
    String language,
    String queryText,
    List<Filter> filters,
    boolean orFilters,
    List<FacetRequest> facetRequests,
    List<SortField> sortFields,
    long offset,
    int hitCount,
    List<String> returnFields)
  {
    this();
    this.indexId = indexId;
    this.language = language;
    this.queryText = queryText;
    this.filters = filters;
    this.orFilters = orFilters;
    setOrFiltersIsSet(true);
    this.facetRequests = facetRequests;
    this.sortFields = sortFields;
    this.offset = offset;
    setOffsetIsSet(true);
    this.hitCount = hitCount;
    setHitCountIsSet(true);
    this.returnFields = returnFields;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleSearchQuery(SimpleSearchQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIndexId()) {
      this.indexId = other.indexId;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetQueryText()) {
      this.queryText = other.queryText;
    }
    if (other.isSetFilters()) {
      List<Filter> __this__filters = new ArrayList<Filter>();
      for (Filter other_element : other.filters) {
        __this__filters.add(new Filter(other_element));
      }
      this.filters = __this__filters;
    }
    this.orFilters = other.orFilters;
    if (other.isSetFacetRequests()) {
      List<FacetRequest> __this__facetRequests = new ArrayList<FacetRequest>();
      for (FacetRequest other_element : other.facetRequests) {
        __this__facetRequests.add(new FacetRequest(other_element));
      }
      this.facetRequests = __this__facetRequests;
    }
    if (other.isSetSortFields()) {
      List<SortField> __this__sortFields = new ArrayList<SortField>();
      for (SortField other_element : other.sortFields) {
        __this__sortFields.add(new SortField(other_element));
      }
      this.sortFields = __this__sortFields;
    }
    this.offset = other.offset;
    this.hitCount = other.hitCount;
    if (other.isSetReturnFields()) {
      List<String> __this__returnFields = new ArrayList<String>();
      for (String other_element : other.returnFields) {
        __this__returnFields.add(other_element);
      }
      this.returnFields = __this__returnFields;
    }
  }

  public SimpleSearchQuery deepCopy() {
    return new SimpleSearchQuery(this);
  }

  @Override
  public void clear() {
    this.indexId = null;
    this.language = null;
    this.queryText = null;
    this.filters = null;
    setOrFiltersIsSet(false);
    this.orFilters = false;
    this.facetRequests = null;
    this.sortFields = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setHitCountIsSet(false);
    this.hitCount = 0;
    this.returnFields = null;
  }

  public String getIndexId() {
    return this.indexId;
  }

  public SimpleSearchQuery setIndexId(String indexId) {
    this.indexId = indexId;
    return this;
  }

  public void unsetIndexId() {
    this.indexId = null;
  }

  /** Returns true if field indexId is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexId() {
    return this.indexId != null;
  }

  public void setIndexIdIsSet(boolean value) {
    if (!value) {
      this.indexId = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public SimpleSearchQuery setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getQueryText() {
    return this.queryText;
  }

  public SimpleSearchQuery setQueryText(String queryText) {
    this.queryText = queryText;
    return this;
  }

  public void unsetQueryText() {
    this.queryText = null;
  }

  /** Returns true if field queryText is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryText() {
    return this.queryText != null;
  }

  public void setQueryTextIsSet(boolean value) {
    if (!value) {
      this.queryText = null;
    }
  }

  public int getFiltersSize() {
    return (this.filters == null) ? 0 : this.filters.size();
  }

  public java.util.Iterator<Filter> getFiltersIterator() {
    return (this.filters == null) ? null : this.filters.iterator();
  }

  public void addToFilters(Filter elem) {
    if (this.filters == null) {
      this.filters = new ArrayList<Filter>();
    }
    this.filters.add(elem);
  }

  public List<Filter> getFilters() {
    return this.filters;
  }

  public SimpleSearchQuery setFilters(List<Filter> filters) {
    this.filters = filters;
    return this;
  }

  public void unsetFilters() {
    this.filters = null;
  }

  /** Returns true if field filters is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters() {
    return this.filters != null;
  }

  public void setFiltersIsSet(boolean value) {
    if (!value) {
      this.filters = null;
    }
  }

  public boolean isOrFilters() {
    return this.orFilters;
  }

  public SimpleSearchQuery setOrFilters(boolean orFilters) {
    this.orFilters = orFilters;
    setOrFiltersIsSet(true);
    return this;
  }

  public void unsetOrFilters() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORFILTERS_ISSET_ID);
  }

  /** Returns true if field orFilters is set (has been assigned a value) and false otherwise */
  public boolean isSetOrFilters() {
    return EncodingUtils.testBit(__isset_bitfield, __ORFILTERS_ISSET_ID);
  }

  public void setOrFiltersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORFILTERS_ISSET_ID, value);
  }

  public int getFacetRequestsSize() {
    return (this.facetRequests == null) ? 0 : this.facetRequests.size();
  }

  public java.util.Iterator<FacetRequest> getFacetRequestsIterator() {
    return (this.facetRequests == null) ? null : this.facetRequests.iterator();
  }

  public void addToFacetRequests(FacetRequest elem) {
    if (this.facetRequests == null) {
      this.facetRequests = new ArrayList<FacetRequest>();
    }
    this.facetRequests.add(elem);
  }

  public List<FacetRequest> getFacetRequests() {
    return this.facetRequests;
  }

  public SimpleSearchQuery setFacetRequests(List<FacetRequest> facetRequests) {
    this.facetRequests = facetRequests;
    return this;
  }

  public void unsetFacetRequests() {
    this.facetRequests = null;
  }

  /** Returns true if field facetRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetFacetRequests() {
    return this.facetRequests != null;
  }

  public void setFacetRequestsIsSet(boolean value) {
    if (!value) {
      this.facetRequests = null;
    }
  }

  public int getSortFieldsSize() {
    return (this.sortFields == null) ? 0 : this.sortFields.size();
  }

  public java.util.Iterator<SortField> getSortFieldsIterator() {
    return (this.sortFields == null) ? null : this.sortFields.iterator();
  }

  public void addToSortFields(SortField elem) {
    if (this.sortFields == null) {
      this.sortFields = new ArrayList<SortField>();
    }
    this.sortFields.add(elem);
  }

  public List<SortField> getSortFields() {
    return this.sortFields;
  }

  public SimpleSearchQuery setSortFields(List<SortField> sortFields) {
    this.sortFields = sortFields;
    return this;
  }

  public void unsetSortFields() {
    this.sortFields = null;
  }

  /** Returns true if field sortFields is set (has been assigned a value) and false otherwise */
  public boolean isSetSortFields() {
    return this.sortFields != null;
  }

  public void setSortFieldsIsSet(boolean value) {
    if (!value) {
      this.sortFields = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public SimpleSearchQuery setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getHitCount() {
    return this.hitCount;
  }

  public SimpleSearchQuery setHitCount(int hitCount) {
    this.hitCount = hitCount;
    setHitCountIsSet(true);
    return this;
  }

  public void unsetHitCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HITCOUNT_ISSET_ID);
  }

  /** Returns true if field hitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHitCount() {
    return EncodingUtils.testBit(__isset_bitfield, __HITCOUNT_ISSET_ID);
  }

  public void setHitCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HITCOUNT_ISSET_ID, value);
  }

  public int getReturnFieldsSize() {
    return (this.returnFields == null) ? 0 : this.returnFields.size();
  }

  public java.util.Iterator<String> getReturnFieldsIterator() {
    return (this.returnFields == null) ? null : this.returnFields.iterator();
  }

  public void addToReturnFields(String elem) {
    if (this.returnFields == null) {
      this.returnFields = new ArrayList<String>();
    }
    this.returnFields.add(elem);
  }

  public List<String> getReturnFields() {
    return this.returnFields;
  }

  public SimpleSearchQuery setReturnFields(List<String> returnFields) {
    this.returnFields = returnFields;
    return this;
  }

  public void unsetReturnFields() {
    this.returnFields = null;
  }

  /** Returns true if field returnFields is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFields() {
    return this.returnFields != null;
  }

  public void setReturnFieldsIsSet(boolean value) {
    if (!value) {
      this.returnFields = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX_ID:
      if (value == null) {
        unsetIndexId();
      } else {
        setIndexId((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case QUERY_TEXT:
      if (value == null) {
        unsetQueryText();
      } else {
        setQueryText((String)value);
      }
      break;

    case FILTERS:
      if (value == null) {
        unsetFilters();
      } else {
        setFilters((List<Filter>)value);
      }
      break;

    case OR_FILTERS:
      if (value == null) {
        unsetOrFilters();
      } else {
        setOrFilters((Boolean)value);
      }
      break;

    case FACET_REQUESTS:
      if (value == null) {
        unsetFacetRequests();
      } else {
        setFacetRequests((List<FacetRequest>)value);
      }
      break;

    case SORT_FIELDS:
      if (value == null) {
        unsetSortFields();
      } else {
        setSortFields((List<SortField>)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Long)value);
      }
      break;

    case HIT_COUNT:
      if (value == null) {
        unsetHitCount();
      } else {
        setHitCount((Integer)value);
      }
      break;

    case RETURN_FIELDS:
      if (value == null) {
        unsetReturnFields();
      } else {
        setReturnFields((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_ID:
      return getIndexId();

    case LANGUAGE:
      return getLanguage();

    case QUERY_TEXT:
      return getQueryText();

    case FILTERS:
      return getFilters();

    case OR_FILTERS:
      return Boolean.valueOf(isOrFilters());

    case FACET_REQUESTS:
      return getFacetRequests();

    case SORT_FIELDS:
      return getSortFields();

    case OFFSET:
      return Long.valueOf(getOffset());

    case HIT_COUNT:
      return Integer.valueOf(getHitCount());

    case RETURN_FIELDS:
      return getReturnFields();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX_ID:
      return isSetIndexId();
    case LANGUAGE:
      return isSetLanguage();
    case QUERY_TEXT:
      return isSetQueryText();
    case FILTERS:
      return isSetFilters();
    case OR_FILTERS:
      return isSetOrFilters();
    case FACET_REQUESTS:
      return isSetFacetRequests();
    case SORT_FIELDS:
      return isSetSortFields();
    case OFFSET:
      return isSetOffset();
    case HIT_COUNT:
      return isSetHitCount();
    case RETURN_FIELDS:
      return isSetReturnFields();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleSearchQuery)
      return this.equals((SimpleSearchQuery)that);
    return false;
  }

  public boolean equals(SimpleSearchQuery that) {
    if (that == null)
      return false;

    boolean this_present_indexId = true && this.isSetIndexId();
    boolean that_present_indexId = true && that.isSetIndexId();
    if (this_present_indexId || that_present_indexId) {
      if (!(this_present_indexId && that_present_indexId))
        return false;
      if (!this.indexId.equals(that.indexId))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_queryText = true && this.isSetQueryText();
    boolean that_present_queryText = true && that.isSetQueryText();
    if (this_present_queryText || that_present_queryText) {
      if (!(this_present_queryText && that_present_queryText))
        return false;
      if (!this.queryText.equals(that.queryText))
        return false;
    }

    boolean this_present_filters = true && this.isSetFilters();
    boolean that_present_filters = true && that.isSetFilters();
    if (this_present_filters || that_present_filters) {
      if (!(this_present_filters && that_present_filters))
        return false;
      if (!this.filters.equals(that.filters))
        return false;
    }

    boolean this_present_orFilters = true;
    boolean that_present_orFilters = true;
    if (this_present_orFilters || that_present_orFilters) {
      if (!(this_present_orFilters && that_present_orFilters))
        return false;
      if (this.orFilters != that.orFilters)
        return false;
    }

    boolean this_present_facetRequests = true && this.isSetFacetRequests();
    boolean that_present_facetRequests = true && that.isSetFacetRequests();
    if (this_present_facetRequests || that_present_facetRequests) {
      if (!(this_present_facetRequests && that_present_facetRequests))
        return false;
      if (!this.facetRequests.equals(that.facetRequests))
        return false;
    }

    boolean this_present_sortFields = true && this.isSetSortFields();
    boolean that_present_sortFields = true && that.isSetSortFields();
    if (this_present_sortFields || that_present_sortFields) {
      if (!(this_present_sortFields && that_present_sortFields))
        return false;
      if (!this.sortFields.equals(that.sortFields))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_hitCount = true;
    boolean that_present_hitCount = true;
    if (this_present_hitCount || that_present_hitCount) {
      if (!(this_present_hitCount && that_present_hitCount))
        return false;
      if (this.hitCount != that.hitCount)
        return false;
    }

    boolean this_present_returnFields = true && this.isSetReturnFields();
    boolean that_present_returnFields = true && that.isSetReturnFields();
    if (this_present_returnFields || that_present_returnFields) {
      if (!(this_present_returnFields && that_present_returnFields))
        return false;
      if (!this.returnFields.equals(that.returnFields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SimpleSearchQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleSearchQuery typedOther = (SimpleSearchQuery)other;

    lastComparison = Boolean.valueOf(isSetIndexId()).compareTo(typedOther.isSetIndexId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexId, typedOther.indexId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryText()).compareTo(typedOther.isSetQueryText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryText, typedOther.queryText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilters()).compareTo(typedOther.isSetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, typedOther.filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrFilters()).compareTo(typedOther.isSetOrFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orFilters, typedOther.orFilters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetRequests()).compareTo(typedOther.isSetFacetRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetRequests, typedOther.facetRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortFields()).compareTo(typedOther.isSetSortFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFields, typedOther.sortFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitCount()).compareTo(typedOther.isSetHitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitCount, typedOther.hitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFields()).compareTo(typedOther.isSetReturnFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFields, typedOther.returnFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleSearchQuery(");
    boolean first = true;

    sb.append("indexId:");
    if (this.indexId == null) {
      sb.append("null");
    } else {
      sb.append(this.indexId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryText:");
    if (this.queryText == null) {
      sb.append("null");
    } else {
      sb.append(this.queryText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filters:");
    if (this.filters == null) {
      sb.append("null");
    } else {
      sb.append(this.filters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orFilters:");
    sb.append(this.orFilters);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetRequests:");
    if (this.facetRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.facetRequests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortFields:");
    if (this.sortFields == null) {
      sb.append("null");
    } else {
      sb.append(this.sortFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitCount:");
    sb.append(this.hitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFields:");
    if (this.returnFields == null) {
      sb.append("null");
    } else {
      sb.append(this.returnFields);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleSearchQueryStandardSchemeFactory implements SchemeFactory {
    public SimpleSearchQueryStandardScheme getScheme() {
      return new SimpleSearchQueryStandardScheme();
    }
  }

  private static class SimpleSearchQueryStandardScheme extends StandardScheme<SimpleSearchQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleSearchQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexId = iprot.readString();
              struct.setIndexIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryText = iprot.readString();
              struct.setQueryTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.filters = new ArrayList<Filter>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  Filter _elem18; // required
                  _elem18 = new Filter();
                  _elem18.read(iprot);
                  struct.filters.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OR_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.orFilters = iprot.readBool();
              struct.setOrFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FACET_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.facetRequests = new ArrayList<FacetRequest>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  FacetRequest _elem21; // required
                  _elem21 = new FacetRequest();
                  _elem21.read(iprot);
                  struct.facetRequests.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setFacetRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SORT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.sortFields = new ArrayList<SortField>(_list22.size);
                for (int _i23 = 0; _i23 < _list22.size; ++_i23)
                {
                  SortField _elem24; // required
                  _elem24 = new SortField();
                  _elem24.read(iprot);
                  struct.sortFields.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setSortFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hitCount = iprot.readI32();
              struct.setHitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RETURN_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.returnFields = new ArrayList<String>(_list25.size);
                for (int _i26 = 0; _i26 < _list25.size; ++_i26)
                {
                  String _elem27; // required
                  _elem27 = iprot.readString();
                  struct.returnFields.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setReturnFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleSearchQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.indexId != null) {
        oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
        oprot.writeString(struct.indexId);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.queryText != null) {
        oprot.writeFieldBegin(QUERY_TEXT_FIELD_DESC);
        oprot.writeString(struct.queryText);
        oprot.writeFieldEnd();
      }
      if (struct.filters != null) {
        oprot.writeFieldBegin(FILTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters.size()));
          for (Filter _iter28 : struct.filters)
          {
            _iter28.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OR_FILTERS_FIELD_DESC);
      oprot.writeBool(struct.orFilters);
      oprot.writeFieldEnd();
      if (struct.facetRequests != null) {
        oprot.writeFieldBegin(FACET_REQUESTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.facetRequests.size()));
          for (FacetRequest _iter29 : struct.facetRequests)
          {
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sortFields != null) {
        oprot.writeFieldBegin(SORT_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortFields.size()));
          for (SortField _iter30 : struct.sortFields)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.hitCount);
      oprot.writeFieldEnd();
      if (struct.returnFields != null) {
        oprot.writeFieldBegin(RETURN_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.returnFields.size()));
          for (String _iter31 : struct.returnFields)
          {
            oprot.writeString(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleSearchQueryTupleSchemeFactory implements SchemeFactory {
    public SimpleSearchQueryTupleScheme getScheme() {
      return new SimpleSearchQueryTupleScheme();
    }
  }

  private static class SimpleSearchQueryTupleScheme extends TupleScheme<SimpleSearchQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleSearchQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndexId()) {
        optionals.set(0);
      }
      if (struct.isSetLanguage()) {
        optionals.set(1);
      }
      if (struct.isSetQueryText()) {
        optionals.set(2);
      }
      if (struct.isSetFilters()) {
        optionals.set(3);
      }
      if (struct.isSetOrFilters()) {
        optionals.set(4);
      }
      if (struct.isSetFacetRequests()) {
        optionals.set(5);
      }
      if (struct.isSetSortFields()) {
        optionals.set(6);
      }
      if (struct.isSetOffset()) {
        optionals.set(7);
      }
      if (struct.isSetHitCount()) {
        optionals.set(8);
      }
      if (struct.isSetReturnFields()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetIndexId()) {
        oprot.writeString(struct.indexId);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetQueryText()) {
        oprot.writeString(struct.queryText);
      }
      if (struct.isSetFilters()) {
        {
          oprot.writeI32(struct.filters.size());
          for (Filter _iter32 : struct.filters)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetOrFilters()) {
        oprot.writeBool(struct.orFilters);
      }
      if (struct.isSetFacetRequests()) {
        {
          oprot.writeI32(struct.facetRequests.size());
          for (FacetRequest _iter33 : struct.facetRequests)
          {
            _iter33.write(oprot);
          }
        }
      }
      if (struct.isSetSortFields()) {
        {
          oprot.writeI32(struct.sortFields.size());
          for (SortField _iter34 : struct.sortFields)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetHitCount()) {
        oprot.writeI32(struct.hitCount);
      }
      if (struct.isSetReturnFields()) {
        {
          oprot.writeI32(struct.returnFields.size());
          for (String _iter35 : struct.returnFields)
          {
            oprot.writeString(_iter35);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleSearchQuery struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.indexId = iprot.readString();
        struct.setIndexIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryText = iprot.readString();
        struct.setQueryTextIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.filters = new ArrayList<Filter>(_list36.size);
          for (int _i37 = 0; _i37 < _list36.size; ++_i37)
          {
            Filter _elem38; // required
            _elem38 = new Filter();
            _elem38.read(iprot);
            struct.filters.add(_elem38);
          }
        }
        struct.setFiltersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orFilters = iprot.readBool();
        struct.setOrFiltersIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.facetRequests = new ArrayList<FacetRequest>(_list39.size);
          for (int _i40 = 0; _i40 < _list39.size; ++_i40)
          {
            FacetRequest _elem41; // required
            _elem41 = new FacetRequest();
            _elem41.read(iprot);
            struct.facetRequests.add(_elem41);
          }
        }
        struct.setFacetRequestsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortFields = new ArrayList<SortField>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            SortField _elem44; // required
            _elem44 = new SortField();
            _elem44.read(iprot);
            struct.sortFields.add(_elem44);
          }
        }
        struct.setSortFieldsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(8)) {
        struct.hitCount = iprot.readI32();
        struct.setHitCountIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.returnFields = new ArrayList<String>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            String _elem47; // required
            _elem47 = iprot.readString();
            struct.returnFields.add(_elem47);
          }
        }
        struct.setReturnFieldsIsSet(true);
      }
    }
  }

}

