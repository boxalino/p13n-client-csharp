/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FacetRequest implements org.apache.thrift.TBase<FacetRequest, FacetRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FacetRequest");

  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_POPULATION_FIELD_DESC = new org.apache.thrift.protocol.TField("minPopulation", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_RANGE_GAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dateRangeGap", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sortOrder", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SORT_ASCENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("sortAscending", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacetRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacetRequestTupleSchemeFactory());
  }

  public String fieldName; // required
  public int maxCount; // required
  public int minPopulation; // required
  /**
   * 
   * @see DateRangeGap
   */
  public DateRangeGap dateRangeGap; // required
  /**
   * 
   * @see FacetSortOrder
   */
  public FacetSortOrder sortOrder; // required
  public boolean sortAscending; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_NAME((short)1, "fieldName"),
    MAX_COUNT((short)2, "maxCount"),
    MIN_POPULATION((short)3, "minPopulation"),
    /**
     * 
     * @see DateRangeGap
     */
    DATE_RANGE_GAP((short)4, "dateRangeGap"),
    /**
     * 
     * @see FacetSortOrder
     */
    SORT_ORDER((short)5, "sortOrder"),
    SORT_ASCENDING((short)6, "sortAscending");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_NAME
          return FIELD_NAME;
        case 2: // MAX_COUNT
          return MAX_COUNT;
        case 3: // MIN_POPULATION
          return MIN_POPULATION;
        case 4: // DATE_RANGE_GAP
          return DATE_RANGE_GAP;
        case 5: // SORT_ORDER
          return SORT_ORDER;
        case 6: // SORT_ASCENDING
          return SORT_ASCENDING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXCOUNT_ISSET_ID = 0;
  private static final int __MINPOPULATION_ISSET_ID = 1;
  private static final int __SORTASCENDING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_POPULATION, new org.apache.thrift.meta_data.FieldMetaData("minPopulation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_RANGE_GAP, new org.apache.thrift.meta_data.FieldMetaData("dateRangeGap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DateRangeGap.class)));
    tmpMap.put(_Fields.SORT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sortOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FacetSortOrder.class)));
    tmpMap.put(_Fields.SORT_ASCENDING, new org.apache.thrift.meta_data.FieldMetaData("sortAscending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FacetRequest.class, metaDataMap);
  }

  public FacetRequest() {
  }

  public FacetRequest(
    String fieldName,
    int maxCount,
    int minPopulation,
    DateRangeGap dateRangeGap,
    FacetSortOrder sortOrder,
    boolean sortAscending)
  {
    this();
    this.fieldName = fieldName;
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    this.minPopulation = minPopulation;
    setMinPopulationIsSet(true);
    this.dateRangeGap = dateRangeGap;
    this.sortOrder = sortOrder;
    this.sortAscending = sortAscending;
    setSortAscendingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FacetRequest(FacetRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    this.maxCount = other.maxCount;
    this.minPopulation = other.minPopulation;
    if (other.isSetDateRangeGap()) {
      this.dateRangeGap = other.dateRangeGap;
    }
    if (other.isSetSortOrder()) {
      this.sortOrder = other.sortOrder;
    }
    this.sortAscending = other.sortAscending;
  }

  public FacetRequest deepCopy() {
    return new FacetRequest(this);
  }

  @Override
  public void clear() {
    this.fieldName = null;
    setMaxCountIsSet(false);
    this.maxCount = 0;
    setMinPopulationIsSet(false);
    this.minPopulation = 0;
    this.dateRangeGap = null;
    this.sortOrder = null;
    setSortAscendingIsSet(false);
    this.sortAscending = false;
  }

  public String getFieldName() {
    return this.fieldName;
  }

  public FacetRequest setFieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public int getMaxCount() {
    return this.maxCount;
  }

  public FacetRequest setMaxCount(int maxCount) {
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    return this;
  }

  public void unsetMaxCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  public void setMaxCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCOUNT_ISSET_ID, value);
  }

  public int getMinPopulation() {
    return this.minPopulation;
  }

  public FacetRequest setMinPopulation(int minPopulation) {
    this.minPopulation = minPopulation;
    setMinPopulationIsSet(true);
    return this;
  }

  public void unsetMinPopulation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINPOPULATION_ISSET_ID);
  }

  /** Returns true if field minPopulation is set (has been assigned a value) and false otherwise */
  public boolean isSetMinPopulation() {
    return EncodingUtils.testBit(__isset_bitfield, __MINPOPULATION_ISSET_ID);
  }

  public void setMinPopulationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINPOPULATION_ISSET_ID, value);
  }

  /**
   * 
   * @see DateRangeGap
   */
  public DateRangeGap getDateRangeGap() {
    return this.dateRangeGap;
  }

  /**
   * 
   * @see DateRangeGap
   */
  public FacetRequest setDateRangeGap(DateRangeGap dateRangeGap) {
    this.dateRangeGap = dateRangeGap;
    return this;
  }

  public void unsetDateRangeGap() {
    this.dateRangeGap = null;
  }

  /** Returns true if field dateRangeGap is set (has been assigned a value) and false otherwise */
  public boolean isSetDateRangeGap() {
    return this.dateRangeGap != null;
  }

  public void setDateRangeGapIsSet(boolean value) {
    if (!value) {
      this.dateRangeGap = null;
    }
  }

  /**
   * 
   * @see FacetSortOrder
   */
  public FacetSortOrder getSortOrder() {
    return this.sortOrder;
  }

  /**
   * 
   * @see FacetSortOrder
   */
  public FacetRequest setSortOrder(FacetSortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  public void unsetSortOrder() {
    this.sortOrder = null;
  }

  /** Returns true if field sortOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSortOrder() {
    return this.sortOrder != null;
  }

  public void setSortOrderIsSet(boolean value) {
    if (!value) {
      this.sortOrder = null;
    }
  }

  public boolean isSortAscending() {
    return this.sortAscending;
  }

  public FacetRequest setSortAscending(boolean sortAscending) {
    this.sortAscending = sortAscending;
    setSortAscendingIsSet(true);
    return this;
  }

  public void unsetSortAscending() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTASCENDING_ISSET_ID);
  }

  /** Returns true if field sortAscending is set (has been assigned a value) and false otherwise */
  public boolean isSetSortAscending() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTASCENDING_ISSET_ID);
  }

  public void setSortAscendingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTASCENDING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((String)value);
      }
      break;

    case MAX_COUNT:
      if (value == null) {
        unsetMaxCount();
      } else {
        setMaxCount((Integer)value);
      }
      break;

    case MIN_POPULATION:
      if (value == null) {
        unsetMinPopulation();
      } else {
        setMinPopulation((Integer)value);
      }
      break;

    case DATE_RANGE_GAP:
      if (value == null) {
        unsetDateRangeGap();
      } else {
        setDateRangeGap((DateRangeGap)value);
      }
      break;

    case SORT_ORDER:
      if (value == null) {
        unsetSortOrder();
      } else {
        setSortOrder((FacetSortOrder)value);
      }
      break;

    case SORT_ASCENDING:
      if (value == null) {
        unsetSortAscending();
      } else {
        setSortAscending((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_NAME:
      return getFieldName();

    case MAX_COUNT:
      return Integer.valueOf(getMaxCount());

    case MIN_POPULATION:
      return Integer.valueOf(getMinPopulation());

    case DATE_RANGE_GAP:
      return getDateRangeGap();

    case SORT_ORDER:
      return getSortOrder();

    case SORT_ASCENDING:
      return Boolean.valueOf(isSortAscending());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_NAME:
      return isSetFieldName();
    case MAX_COUNT:
      return isSetMaxCount();
    case MIN_POPULATION:
      return isSetMinPopulation();
    case DATE_RANGE_GAP:
      return isSetDateRangeGap();
    case SORT_ORDER:
      return isSetSortOrder();
    case SORT_ASCENDING:
      return isSetSortAscending();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FacetRequest)
      return this.equals((FacetRequest)that);
    return false;
  }

  public boolean equals(FacetRequest that) {
    if (that == null)
      return false;

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_maxCount = true;
    boolean that_present_maxCount = true;
    if (this_present_maxCount || that_present_maxCount) {
      if (!(this_present_maxCount && that_present_maxCount))
        return false;
      if (this.maxCount != that.maxCount)
        return false;
    }

    boolean this_present_minPopulation = true;
    boolean that_present_minPopulation = true;
    if (this_present_minPopulation || that_present_minPopulation) {
      if (!(this_present_minPopulation && that_present_minPopulation))
        return false;
      if (this.minPopulation != that.minPopulation)
        return false;
    }

    boolean this_present_dateRangeGap = true && this.isSetDateRangeGap();
    boolean that_present_dateRangeGap = true && that.isSetDateRangeGap();
    if (this_present_dateRangeGap || that_present_dateRangeGap) {
      if (!(this_present_dateRangeGap && that_present_dateRangeGap))
        return false;
      if (!this.dateRangeGap.equals(that.dateRangeGap))
        return false;
    }

    boolean this_present_sortOrder = true && this.isSetSortOrder();
    boolean that_present_sortOrder = true && that.isSetSortOrder();
    if (this_present_sortOrder || that_present_sortOrder) {
      if (!(this_present_sortOrder && that_present_sortOrder))
        return false;
      if (!this.sortOrder.equals(that.sortOrder))
        return false;
    }

    boolean this_present_sortAscending = true;
    boolean that_present_sortAscending = true;
    if (this_present_sortAscending || that_present_sortAscending) {
      if (!(this_present_sortAscending && that_present_sortAscending))
        return false;
      if (this.sortAscending != that.sortAscending)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FacetRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FacetRequest typedOther = (FacetRequest)other;

    lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(typedOther.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, typedOther.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(typedOther.isSetMaxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, typedOther.maxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinPopulation()).compareTo(typedOther.isSetMinPopulation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinPopulation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPopulation, typedOther.minPopulation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateRangeGap()).compareTo(typedOther.isSetDateRangeGap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateRangeGap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateRangeGap, typedOther.dateRangeGap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortOrder()).compareTo(typedOther.isSetSortOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortOrder, typedOther.sortOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortAscending()).compareTo(typedOther.isSetSortAscending());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortAscending()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortAscending, typedOther.sortAscending);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FacetRequest(");
    boolean first = true;

    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCount:");
    sb.append(this.maxCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minPopulation:");
    sb.append(this.minPopulation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateRangeGap:");
    if (this.dateRangeGap == null) {
      sb.append("null");
    } else {
      sb.append(this.dateRangeGap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortOrder:");
    if (this.sortOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.sortOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortAscending:");
    sb.append(this.sortAscending);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetRequestStandardSchemeFactory implements SchemeFactory {
    public FacetRequestStandardScheme getScheme() {
      return new FacetRequestStandardScheme();
    }
  }

  private static class FacetRequestStandardScheme extends StandardScheme<FacetRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FacetRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxCount = iprot.readI32();
              struct.setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_POPULATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minPopulation = iprot.readI32();
              struct.setMinPopulationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_RANGE_GAP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dateRangeGap = DateRangeGap.findByValue(iprot.readI32());
              struct.setDateRangeGapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortOrder = FacetSortOrder.findByValue(iprot.readI32());
              struct.setSortOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SORT_ASCENDING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sortAscending = iprot.readBool();
              struct.setSortAscendingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FacetRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI32(struct.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_POPULATION_FIELD_DESC);
      oprot.writeI32(struct.minPopulation);
      oprot.writeFieldEnd();
      if (struct.dateRangeGap != null) {
        oprot.writeFieldBegin(DATE_RANGE_GAP_FIELD_DESC);
        oprot.writeI32(struct.dateRangeGap.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sortOrder != null) {
        oprot.writeFieldBegin(SORT_ORDER_FIELD_DESC);
        oprot.writeI32(struct.sortOrder.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SORT_ASCENDING_FIELD_DESC);
      oprot.writeBool(struct.sortAscending);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetRequestTupleSchemeFactory implements SchemeFactory {
    public FacetRequestTupleScheme getScheme() {
      return new FacetRequestTupleScheme();
    }
  }

  private static class FacetRequestTupleScheme extends TupleScheme<FacetRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FacetRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFieldName()) {
        optionals.set(0);
      }
      if (struct.isSetMaxCount()) {
        optionals.set(1);
      }
      if (struct.isSetMinPopulation()) {
        optionals.set(2);
      }
      if (struct.isSetDateRangeGap()) {
        optionals.set(3);
      }
      if (struct.isSetSortOrder()) {
        optionals.set(4);
      }
      if (struct.isSetSortAscending()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
      if (struct.isSetMaxCount()) {
        oprot.writeI32(struct.maxCount);
      }
      if (struct.isSetMinPopulation()) {
        oprot.writeI32(struct.minPopulation);
      }
      if (struct.isSetDateRangeGap()) {
        oprot.writeI32(struct.dateRangeGap.getValue());
      }
      if (struct.isSetSortOrder()) {
        oprot.writeI32(struct.sortOrder.getValue());
      }
      if (struct.isSetSortAscending()) {
        oprot.writeBool(struct.sortAscending);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FacetRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxCount = iprot.readI32();
        struct.setMaxCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minPopulation = iprot.readI32();
        struct.setMinPopulationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateRangeGap = DateRangeGap.findByValue(iprot.readI32());
        struct.setDateRangeGapIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sortOrder = FacetSortOrder.findByValue(iprot.readI32());
        struct.setSortOrderIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sortAscending = iprot.readBool();
        struct.setSortAscendingIsSet(true);
      }
    }
  }

}

