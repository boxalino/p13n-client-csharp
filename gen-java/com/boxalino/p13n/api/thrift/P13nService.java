/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.p13n.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class P13nService {

  public interface Iface {

    public ChoiceResponse choose(ChoiceRequest choiceRequest) throws P13ServiceException, org.apache.thrift.TException;

    public ByteBuffer uploadChoiceConfiguration(ByteBuffer xmlPayload) throws P13ServiceException, org.apache.thrift.TException;

    public int saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues) throws P13ServiceException, org.apache.thrift.TException;

    public String command(String command) throws P13ServiceException, org.apache.thrift.TException;

    public BatchChoiceResponse batchChoose(BatchChoiceRequest batchChoiceRequest) throws P13ServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void choose(ChoiceRequest choiceRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.choose_call> resultHandler) throws org.apache.thrift.TException;

    public void uploadChoiceConfiguration(ByteBuffer xmlPayload, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadChoiceConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveProfileProperties_call> resultHandler) throws org.apache.thrift.TException;

    public void command(String command, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.command_call> resultHandler) throws org.apache.thrift.TException;

    public void batchChoose(BatchChoiceRequest batchChoiceRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.batchChoose_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ChoiceResponse choose(ChoiceRequest choiceRequest) throws P13ServiceException, org.apache.thrift.TException
    {
      send_choose(choiceRequest);
      return recv_choose();
    }

    public void send_choose(ChoiceRequest choiceRequest) throws org.apache.thrift.TException
    {
      choose_args args = new choose_args();
      args.setChoiceRequest(choiceRequest);
      sendBase("choose", args);
    }

    public ChoiceResponse recv_choose() throws P13ServiceException, org.apache.thrift.TException
    {
      choose_result result = new choose_result();
      receiveBase(result, "choose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13ServiceException != null) {
        throw result.p13ServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "choose failed: unknown result");
    }

    public ByteBuffer uploadChoiceConfiguration(ByteBuffer xmlPayload) throws P13ServiceException, org.apache.thrift.TException
    {
      send_uploadChoiceConfiguration(xmlPayload);
      return recv_uploadChoiceConfiguration();
    }

    public void send_uploadChoiceConfiguration(ByteBuffer xmlPayload) throws org.apache.thrift.TException
    {
      uploadChoiceConfiguration_args args = new uploadChoiceConfiguration_args();
      args.setXmlPayload(xmlPayload);
      sendBase("uploadChoiceConfiguration", args);
    }

    public ByteBuffer recv_uploadChoiceConfiguration() throws P13ServiceException, org.apache.thrift.TException
    {
      uploadChoiceConfiguration_result result = new uploadChoiceConfiguration_result();
      receiveBase(result, "uploadChoiceConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13ServiceException != null) {
        throw result.p13ServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadChoiceConfiguration failed: unknown result");
    }

    public int saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues) throws P13ServiceException, org.apache.thrift.TException
    {
      send_saveProfileProperties(profilePropertyValues);
      return recv_saveProfileProperties();
    }

    public void send_saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues) throws org.apache.thrift.TException
    {
      saveProfileProperties_args args = new saveProfileProperties_args();
      args.setProfilePropertyValues(profilePropertyValues);
      sendBase("saveProfileProperties", args);
    }

    public int recv_saveProfileProperties() throws P13ServiceException, org.apache.thrift.TException
    {
      saveProfileProperties_result result = new saveProfileProperties_result();
      receiveBase(result, "saveProfileProperties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13ServiceException != null) {
        throw result.p13ServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveProfileProperties failed: unknown result");
    }

    public String command(String command) throws P13ServiceException, org.apache.thrift.TException
    {
      send_command(command);
      return recv_command();
    }

    public void send_command(String command) throws org.apache.thrift.TException
    {
      command_args args = new command_args();
      args.setCommand(command);
      sendBase("command", args);
    }

    public String recv_command() throws P13ServiceException, org.apache.thrift.TException
    {
      command_result result = new command_result();
      receiveBase(result, "command");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13ServiceException != null) {
        throw result.p13ServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "command failed: unknown result");
    }

    public BatchChoiceResponse batchChoose(BatchChoiceRequest batchChoiceRequest) throws P13ServiceException, org.apache.thrift.TException
    {
      send_batchChoose(batchChoiceRequest);
      return recv_batchChoose();
    }

    public void send_batchChoose(BatchChoiceRequest batchChoiceRequest) throws org.apache.thrift.TException
    {
      batchChoose_args args = new batchChoose_args();
      args.setBatchChoiceRequest(batchChoiceRequest);
      sendBase("batchChoose", args);
    }

    public BatchChoiceResponse recv_batchChoose() throws P13ServiceException, org.apache.thrift.TException
    {
      batchChoose_result result = new batchChoose_result();
      receiveBase(result, "batchChoose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.p13ServiceException != null) {
        throw result.p13ServiceException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchChoose failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void choose(ChoiceRequest choiceRequest, org.apache.thrift.async.AsyncMethodCallback<choose_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      choose_call method_call = new choose_call(choiceRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class choose_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ChoiceRequest choiceRequest;
      public choose_call(ChoiceRequest choiceRequest, org.apache.thrift.async.AsyncMethodCallback<choose_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.choiceRequest = choiceRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("choose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        choose_args args = new choose_args();
        args.setChoiceRequest(choiceRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChoiceResponse getResult() throws P13ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_choose();
      }
    }

    public void uploadChoiceConfiguration(ByteBuffer xmlPayload, org.apache.thrift.async.AsyncMethodCallback<uploadChoiceConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadChoiceConfiguration_call method_call = new uploadChoiceConfiguration_call(xmlPayload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadChoiceConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer xmlPayload;
      public uploadChoiceConfiguration_call(ByteBuffer xmlPayload, org.apache.thrift.async.AsyncMethodCallback<uploadChoiceConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlPayload = xmlPayload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadChoiceConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadChoiceConfiguration_args args = new uploadChoiceConfiguration_args();
        args.setXmlPayload(xmlPayload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws P13ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadChoiceConfiguration();
      }
    }

    public void saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues, org.apache.thrift.async.AsyncMethodCallback<saveProfileProperties_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveProfileProperties_call method_call = new saveProfileProperties_call(profilePropertyValues, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveProfileProperties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ProfilePropertyValue> profilePropertyValues;
      public saveProfileProperties_call(List<ProfilePropertyValue> profilePropertyValues, org.apache.thrift.async.AsyncMethodCallback<saveProfileProperties_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profilePropertyValues = profilePropertyValues;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveProfileProperties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveProfileProperties_args args = new saveProfileProperties_args();
        args.setProfilePropertyValues(profilePropertyValues);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws P13ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveProfileProperties();
      }
    }

    public void command(String command, org.apache.thrift.async.AsyncMethodCallback<command_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      command_call method_call = new command_call(command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class command_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String command;
      public command_call(String command, org.apache.thrift.async.AsyncMethodCallback<command_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("command", org.apache.thrift.protocol.TMessageType.CALL, 0));
        command_args args = new command_args();
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws P13ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_command();
      }
    }

    public void batchChoose(BatchChoiceRequest batchChoiceRequest, org.apache.thrift.async.AsyncMethodCallback<batchChoose_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchChoose_call method_call = new batchChoose_call(batchChoiceRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchChoose_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BatchChoiceRequest batchChoiceRequest;
      public batchChoose_call(BatchChoiceRequest batchChoiceRequest, org.apache.thrift.async.AsyncMethodCallback<batchChoose_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchChoiceRequest = batchChoiceRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchChoose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchChoose_args args = new batchChoose_args();
        args.setBatchChoiceRequest(batchChoiceRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BatchChoiceResponse getResult() throws P13ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchChoose();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("choose", new choose());
      processMap.put("uploadChoiceConfiguration", new uploadChoiceConfiguration());
      processMap.put("saveProfileProperties", new saveProfileProperties());
      processMap.put("command", new command());
      processMap.put("batchChoose", new batchChoose());
      return processMap;
    }

    public static class choose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, choose_args> {
      public choose() {
        super("choose");
      }

      public choose_args getEmptyArgsInstance() {
        return new choose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public choose_result getResult(I iface, choose_args args) throws org.apache.thrift.TException {
        choose_result result = new choose_result();
        try {
          result.success = iface.choose(args.choiceRequest);
        } catch (P13ServiceException p13ServiceException) {
          result.p13ServiceException = p13ServiceException;
        }
        return result;
      }
    }

    public static class uploadChoiceConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadChoiceConfiguration_args> {
      public uploadChoiceConfiguration() {
        super("uploadChoiceConfiguration");
      }

      public uploadChoiceConfiguration_args getEmptyArgsInstance() {
        return new uploadChoiceConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadChoiceConfiguration_result getResult(I iface, uploadChoiceConfiguration_args args) throws org.apache.thrift.TException {
        uploadChoiceConfiguration_result result = new uploadChoiceConfiguration_result();
        try {
          result.success = iface.uploadChoiceConfiguration(args.xmlPayload);
        } catch (P13ServiceException p13ServiceException) {
          result.p13ServiceException = p13ServiceException;
        }
        return result;
      }
    }

    public static class saveProfileProperties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveProfileProperties_args> {
      public saveProfileProperties() {
        super("saveProfileProperties");
      }

      public saveProfileProperties_args getEmptyArgsInstance() {
        return new saveProfileProperties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveProfileProperties_result getResult(I iface, saveProfileProperties_args args) throws org.apache.thrift.TException {
        saveProfileProperties_result result = new saveProfileProperties_result();
        try {
          result.success = iface.saveProfileProperties(args.profilePropertyValues);
          result.setSuccessIsSet(true);
        } catch (P13ServiceException p13ServiceException) {
          result.p13ServiceException = p13ServiceException;
        }
        return result;
      }
    }

    public static class command<I extends Iface> extends org.apache.thrift.ProcessFunction<I, command_args> {
      public command() {
        super("command");
      }

      public command_args getEmptyArgsInstance() {
        return new command_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public command_result getResult(I iface, command_args args) throws org.apache.thrift.TException {
        command_result result = new command_result();
        try {
          result.success = iface.command(args.command);
        } catch (P13ServiceException p13ServiceException) {
          result.p13ServiceException = p13ServiceException;
        }
        return result;
      }
    }

    public static class batchChoose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchChoose_args> {
      public batchChoose() {
        super("batchChoose");
      }

      public batchChoose_args getEmptyArgsInstance() {
        return new batchChoose_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchChoose_result getResult(I iface, batchChoose_args args) throws org.apache.thrift.TException {
        batchChoose_result result = new batchChoose_result();
        try {
          result.success = iface.batchChoose(args.batchChoiceRequest);
        } catch (P13ServiceException p13ServiceException) {
          result.p13ServiceException = p13ServiceException;
        }
        return result;
      }
    }

  }

  public static class choose_args implements org.apache.thrift.TBase<choose_args, choose_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("choose_args");

    private static final org.apache.thrift.protocol.TField CHOICE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceRequest", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new choose_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new choose_argsTupleSchemeFactory());
    }

    public ChoiceRequest choiceRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHOICE_REQUEST((short)-1, "choiceRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // CHOICE_REQUEST
            return CHOICE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHOICE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("choiceRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(choose_args.class, metaDataMap);
    }

    public choose_args() {
    }

    public choose_args(
      ChoiceRequest choiceRequest)
    {
      this();
      this.choiceRequest = choiceRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public choose_args(choose_args other) {
      if (other.isSetChoiceRequest()) {
        this.choiceRequest = new ChoiceRequest(other.choiceRequest);
      }
    }

    public choose_args deepCopy() {
      return new choose_args(this);
    }

    @Override
    public void clear() {
      this.choiceRequest = null;
    }

    public ChoiceRequest getChoiceRequest() {
      return this.choiceRequest;
    }

    public choose_args setChoiceRequest(ChoiceRequest choiceRequest) {
      this.choiceRequest = choiceRequest;
      return this;
    }

    public void unsetChoiceRequest() {
      this.choiceRequest = null;
    }

    /** Returns true if field choiceRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceRequest() {
      return this.choiceRequest != null;
    }

    public void setChoiceRequestIsSet(boolean value) {
      if (!value) {
        this.choiceRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHOICE_REQUEST:
        if (value == null) {
          unsetChoiceRequest();
        } else {
          setChoiceRequest((ChoiceRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHOICE_REQUEST:
        return getChoiceRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHOICE_REQUEST:
        return isSetChoiceRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof choose_args)
        return this.equals((choose_args)that);
      return false;
    }

    public boolean equals(choose_args that) {
      if (that == null)
        return false;

      boolean this_present_choiceRequest = true && this.isSetChoiceRequest();
      boolean that_present_choiceRequest = true && that.isSetChoiceRequest();
      if (this_present_choiceRequest || that_present_choiceRequest) {
        if (!(this_present_choiceRequest && that_present_choiceRequest))
          return false;
        if (!this.choiceRequest.equals(that.choiceRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(choose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      choose_args typedOther = (choose_args)other;

      lastComparison = Boolean.valueOf(isSetChoiceRequest()).compareTo(typedOther.isSetChoiceRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceRequest, typedOther.choiceRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("choose_args(");
      boolean first = true;

      sb.append("choiceRequest:");
      if (this.choiceRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (choiceRequest != null) {
        choiceRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class choose_argsStandardSchemeFactory implements SchemeFactory {
      public choose_argsStandardScheme getScheme() {
        return new choose_argsStandardScheme();
      }
    }

    private static class choose_argsStandardScheme extends StandardScheme<choose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, choose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // CHOICE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.choiceRequest = new ChoiceRequest();
                struct.choiceRequest.read(iprot);
                struct.setChoiceRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, choose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.choiceRequest != null) {
          oprot.writeFieldBegin(CHOICE_REQUEST_FIELD_DESC);
          struct.choiceRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class choose_argsTupleSchemeFactory implements SchemeFactory {
      public choose_argsTupleScheme getScheme() {
        return new choose_argsTupleScheme();
      }
    }

    private static class choose_argsTupleScheme extends TupleScheme<choose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, choose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChoiceRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChoiceRequest()) {
          struct.choiceRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, choose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.choiceRequest = new ChoiceRequest();
          struct.choiceRequest.read(iprot);
          struct.setChoiceRequestIsSet(true);
        }
      }
    }

  }

  public static class choose_result implements org.apache.thrift.TBase<choose_result, choose_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("choose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField P13_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13ServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new choose_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new choose_resultTupleSchemeFactory());
    }

    public ChoiceResponse success; // required
    public P13ServiceException p13ServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13_SERVICE_EXCEPTION((short)1, "p13ServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13_SERVICE_EXCEPTION
            return P13_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceResponse.class)));
      tmpMap.put(_Fields.P13_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13ServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(choose_result.class, metaDataMap);
    }

    public choose_result() {
    }

    public choose_result(
      ChoiceResponse success,
      P13ServiceException p13ServiceException)
    {
      this();
      this.success = success;
      this.p13ServiceException = p13ServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public choose_result(choose_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChoiceResponse(other.success);
      }
      if (other.isSetP13ServiceException()) {
        this.p13ServiceException = new P13ServiceException(other.p13ServiceException);
      }
    }

    public choose_result deepCopy() {
      return new choose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13ServiceException = null;
    }

    public ChoiceResponse getSuccess() {
      return this.success;
    }

    public choose_result setSuccess(ChoiceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13ServiceException getP13ServiceException() {
      return this.p13ServiceException;
    }

    public choose_result setP13ServiceException(P13ServiceException p13ServiceException) {
      this.p13ServiceException = p13ServiceException;
      return this;
    }

    public void unsetP13ServiceException() {
      this.p13ServiceException = null;
    }

    /** Returns true if field p13ServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13ServiceException() {
      return this.p13ServiceException != null;
    }

    public void setP13ServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13ServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChoiceResponse)value);
        }
        break;

      case P13_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13ServiceException();
        } else {
          setP13ServiceException((P13ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13_SERVICE_EXCEPTION:
        return getP13ServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13_SERVICE_EXCEPTION:
        return isSetP13ServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof choose_result)
        return this.equals((choose_result)that);
      return false;
    }

    public boolean equals(choose_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13ServiceException = true && this.isSetP13ServiceException();
      boolean that_present_p13ServiceException = true && that.isSetP13ServiceException();
      if (this_present_p13ServiceException || that_present_p13ServiceException) {
        if (!(this_present_p13ServiceException && that_present_p13ServiceException))
          return false;
        if (!this.p13ServiceException.equals(that.p13ServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(choose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      choose_result typedOther = (choose_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13ServiceException()).compareTo(typedOther.isSetP13ServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13ServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13ServiceException, typedOther.p13ServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("choose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13ServiceException:");
      if (this.p13ServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13ServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class choose_resultStandardSchemeFactory implements SchemeFactory {
      public choose_resultStandardScheme getScheme() {
        return new choose_resultStandardScheme();
      }
    }

    private static class choose_resultStandardScheme extends StandardScheme<choose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, choose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChoiceResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13ServiceException = new P13ServiceException();
                struct.p13ServiceException.read(iprot);
                struct.setP13ServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, choose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p13ServiceException != null) {
          oprot.writeFieldBegin(P13_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13ServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class choose_resultTupleSchemeFactory implements SchemeFactory {
      public choose_resultTupleScheme getScheme() {
        return new choose_resultTupleScheme();
      }
    }

    private static class choose_resultTupleScheme extends TupleScheme<choose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, choose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13ServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetP13ServiceException()) {
          struct.p13ServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, choose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChoiceResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13ServiceException = new P13ServiceException();
          struct.p13ServiceException.read(iprot);
          struct.setP13ServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class uploadChoiceConfiguration_args implements org.apache.thrift.TBase<uploadChoiceConfiguration_args, uploadChoiceConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadChoiceConfiguration_args");

    private static final org.apache.thrift.protocol.TField XML_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlPayload", org.apache.thrift.protocol.TType.STRING, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadChoiceConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadChoiceConfiguration_argsTupleSchemeFactory());
    }

    public ByteBuffer xmlPayload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_PAYLOAD((short)-1, "xmlPayload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // XML_PAYLOAD
            return XML_PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("xmlPayload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadChoiceConfiguration_args.class, metaDataMap);
    }

    public uploadChoiceConfiguration_args() {
    }

    public uploadChoiceConfiguration_args(
      ByteBuffer xmlPayload)
    {
      this();
      this.xmlPayload = xmlPayload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadChoiceConfiguration_args(uploadChoiceConfiguration_args other) {
      if (other.isSetXmlPayload()) {
        this.xmlPayload = org.apache.thrift.TBaseHelper.copyBinary(other.xmlPayload);
;
      }
    }

    public uploadChoiceConfiguration_args deepCopy() {
      return new uploadChoiceConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.xmlPayload = null;
    }

    public byte[] getXmlPayload() {
      setXmlPayload(org.apache.thrift.TBaseHelper.rightSize(xmlPayload));
      return xmlPayload == null ? null : xmlPayload.array();
    }

    public ByteBuffer bufferForXmlPayload() {
      return xmlPayload;
    }

    public uploadChoiceConfiguration_args setXmlPayload(byte[] xmlPayload) {
      setXmlPayload(xmlPayload == null ? (ByteBuffer)null : ByteBuffer.wrap(xmlPayload));
      return this;
    }

    public uploadChoiceConfiguration_args setXmlPayload(ByteBuffer xmlPayload) {
      this.xmlPayload = xmlPayload;
      return this;
    }

    public void unsetXmlPayload() {
      this.xmlPayload = null;
    }

    /** Returns true if field xmlPayload is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlPayload() {
      return this.xmlPayload != null;
    }

    public void setXmlPayloadIsSet(boolean value) {
      if (!value) {
        this.xmlPayload = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XML_PAYLOAD:
        if (value == null) {
          unsetXmlPayload();
        } else {
          setXmlPayload((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_PAYLOAD:
        return getXmlPayload();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XML_PAYLOAD:
        return isSetXmlPayload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadChoiceConfiguration_args)
        return this.equals((uploadChoiceConfiguration_args)that);
      return false;
    }

    public boolean equals(uploadChoiceConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlPayload = true && this.isSetXmlPayload();
      boolean that_present_xmlPayload = true && that.isSetXmlPayload();
      if (this_present_xmlPayload || that_present_xmlPayload) {
        if (!(this_present_xmlPayload && that_present_xmlPayload))
          return false;
        if (!this.xmlPayload.equals(that.xmlPayload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadChoiceConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadChoiceConfiguration_args typedOther = (uploadChoiceConfiguration_args)other;

      lastComparison = Boolean.valueOf(isSetXmlPayload()).compareTo(typedOther.isSetXmlPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlPayload, typedOther.xmlPayload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadChoiceConfiguration_args(");
      boolean first = true;

      sb.append("xmlPayload:");
      if (this.xmlPayload == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.xmlPayload, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadChoiceConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public uploadChoiceConfiguration_argsStandardScheme getScheme() {
        return new uploadChoiceConfiguration_argsStandardScheme();
      }
    }

    private static class uploadChoiceConfiguration_argsStandardScheme extends StandardScheme<uploadChoiceConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadChoiceConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // XML_PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlPayload = iprot.readBinary();
                struct.setXmlPayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadChoiceConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlPayload != null) {
          oprot.writeFieldBegin(XML_PAYLOAD_FIELD_DESC);
          oprot.writeBinary(struct.xmlPayload);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadChoiceConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public uploadChoiceConfiguration_argsTupleScheme getScheme() {
        return new uploadChoiceConfiguration_argsTupleScheme();
      }
    }

    private static class uploadChoiceConfiguration_argsTupleScheme extends TupleScheme<uploadChoiceConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadChoiceConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlPayload()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlPayload()) {
          oprot.writeBinary(struct.xmlPayload);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadChoiceConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlPayload = iprot.readBinary();
          struct.setXmlPayloadIsSet(true);
        }
      }
    }

  }

  public static class uploadChoiceConfiguration_result implements org.apache.thrift.TBase<uploadChoiceConfiguration_result, uploadChoiceConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadChoiceConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField P13_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13ServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadChoiceConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadChoiceConfiguration_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required
    public P13ServiceException p13ServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13_SERVICE_EXCEPTION((short)1, "p13ServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13_SERVICE_EXCEPTION
            return P13_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.P13_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13ServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadChoiceConfiguration_result.class, metaDataMap);
    }

    public uploadChoiceConfiguration_result() {
    }

    public uploadChoiceConfiguration_result(
      ByteBuffer success,
      P13ServiceException p13ServiceException)
    {
      this();
      this.success = success;
      this.p13ServiceException = p13ServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadChoiceConfiguration_result(uploadChoiceConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
      if (other.isSetP13ServiceException()) {
        this.p13ServiceException = new P13ServiceException(other.p13ServiceException);
      }
    }

    public uploadChoiceConfiguration_result deepCopy() {
      return new uploadChoiceConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13ServiceException = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public uploadChoiceConfiguration_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public uploadChoiceConfiguration_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13ServiceException getP13ServiceException() {
      return this.p13ServiceException;
    }

    public uploadChoiceConfiguration_result setP13ServiceException(P13ServiceException p13ServiceException) {
      this.p13ServiceException = p13ServiceException;
      return this;
    }

    public void unsetP13ServiceException() {
      this.p13ServiceException = null;
    }

    /** Returns true if field p13ServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13ServiceException() {
      return this.p13ServiceException != null;
    }

    public void setP13ServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13ServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case P13_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13ServiceException();
        } else {
          setP13ServiceException((P13ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13_SERVICE_EXCEPTION:
        return getP13ServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13_SERVICE_EXCEPTION:
        return isSetP13ServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadChoiceConfiguration_result)
        return this.equals((uploadChoiceConfiguration_result)that);
      return false;
    }

    public boolean equals(uploadChoiceConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13ServiceException = true && this.isSetP13ServiceException();
      boolean that_present_p13ServiceException = true && that.isSetP13ServiceException();
      if (this_present_p13ServiceException || that_present_p13ServiceException) {
        if (!(this_present_p13ServiceException && that_present_p13ServiceException))
          return false;
        if (!this.p13ServiceException.equals(that.p13ServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(uploadChoiceConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      uploadChoiceConfiguration_result typedOther = (uploadChoiceConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13ServiceException()).compareTo(typedOther.isSetP13ServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13ServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13ServiceException, typedOther.p13ServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadChoiceConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13ServiceException:");
      if (this.p13ServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13ServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadChoiceConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public uploadChoiceConfiguration_resultStandardScheme getScheme() {
        return new uploadChoiceConfiguration_resultStandardScheme();
      }
    }

    private static class uploadChoiceConfiguration_resultStandardScheme extends StandardScheme<uploadChoiceConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadChoiceConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13ServiceException = new P13ServiceException();
                struct.p13ServiceException.read(iprot);
                struct.setP13ServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadChoiceConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.p13ServiceException != null) {
          oprot.writeFieldBegin(P13_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13ServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadChoiceConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public uploadChoiceConfiguration_resultTupleScheme getScheme() {
        return new uploadChoiceConfiguration_resultTupleScheme();
      }
    }

    private static class uploadChoiceConfiguration_resultTupleScheme extends TupleScheme<uploadChoiceConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadChoiceConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13ServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetP13ServiceException()) {
          struct.p13ServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadChoiceConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13ServiceException = new P13ServiceException();
          struct.p13ServiceException.read(iprot);
          struct.setP13ServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class saveProfileProperties_args implements org.apache.thrift.TBase<saveProfileProperties_args, saveProfileProperties_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveProfileProperties_args");

    private static final org.apache.thrift.protocol.TField PROFILE_PROPERTY_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("profilePropertyValues", org.apache.thrift.protocol.TType.LIST, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveProfileProperties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveProfileProperties_argsTupleSchemeFactory());
    }

    public List<ProfilePropertyValue> profilePropertyValues; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_PROPERTY_VALUES((short)-1, "profilePropertyValues");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // PROFILE_PROPERTY_VALUES
            return PROFILE_PROPERTY_VALUES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_PROPERTY_VALUES, new org.apache.thrift.meta_data.FieldMetaData("profilePropertyValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfilePropertyValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveProfileProperties_args.class, metaDataMap);
    }

    public saveProfileProperties_args() {
    }

    public saveProfileProperties_args(
      List<ProfilePropertyValue> profilePropertyValues)
    {
      this();
      this.profilePropertyValues = profilePropertyValues;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveProfileProperties_args(saveProfileProperties_args other) {
      if (other.isSetProfilePropertyValues()) {
        List<ProfilePropertyValue> __this__profilePropertyValues = new ArrayList<ProfilePropertyValue>();
        for (ProfilePropertyValue other_element : other.profilePropertyValues) {
          __this__profilePropertyValues.add(new ProfilePropertyValue(other_element));
        }
        this.profilePropertyValues = __this__profilePropertyValues;
      }
    }

    public saveProfileProperties_args deepCopy() {
      return new saveProfileProperties_args(this);
    }

    @Override
    public void clear() {
      this.profilePropertyValues = null;
    }

    public int getProfilePropertyValuesSize() {
      return (this.profilePropertyValues == null) ? 0 : this.profilePropertyValues.size();
    }

    public java.util.Iterator<ProfilePropertyValue> getProfilePropertyValuesIterator() {
      return (this.profilePropertyValues == null) ? null : this.profilePropertyValues.iterator();
    }

    public void addToProfilePropertyValues(ProfilePropertyValue elem) {
      if (this.profilePropertyValues == null) {
        this.profilePropertyValues = new ArrayList<ProfilePropertyValue>();
      }
      this.profilePropertyValues.add(elem);
    }

    public List<ProfilePropertyValue> getProfilePropertyValues() {
      return this.profilePropertyValues;
    }

    public saveProfileProperties_args setProfilePropertyValues(List<ProfilePropertyValue> profilePropertyValues) {
      this.profilePropertyValues = profilePropertyValues;
      return this;
    }

    public void unsetProfilePropertyValues() {
      this.profilePropertyValues = null;
    }

    /** Returns true if field profilePropertyValues is set (has been assigned a value) and false otherwise */
    public boolean isSetProfilePropertyValues() {
      return this.profilePropertyValues != null;
    }

    public void setProfilePropertyValuesIsSet(boolean value) {
      if (!value) {
        this.profilePropertyValues = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_PROPERTY_VALUES:
        if (value == null) {
          unsetProfilePropertyValues();
        } else {
          setProfilePropertyValues((List<ProfilePropertyValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_PROPERTY_VALUES:
        return getProfilePropertyValues();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_PROPERTY_VALUES:
        return isSetProfilePropertyValues();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveProfileProperties_args)
        return this.equals((saveProfileProperties_args)that);
      return false;
    }

    public boolean equals(saveProfileProperties_args that) {
      if (that == null)
        return false;

      boolean this_present_profilePropertyValues = true && this.isSetProfilePropertyValues();
      boolean that_present_profilePropertyValues = true && that.isSetProfilePropertyValues();
      if (this_present_profilePropertyValues || that_present_profilePropertyValues) {
        if (!(this_present_profilePropertyValues && that_present_profilePropertyValues))
          return false;
        if (!this.profilePropertyValues.equals(that.profilePropertyValues))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveProfileProperties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveProfileProperties_args typedOther = (saveProfileProperties_args)other;

      lastComparison = Boolean.valueOf(isSetProfilePropertyValues()).compareTo(typedOther.isSetProfilePropertyValues());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfilePropertyValues()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profilePropertyValues, typedOther.profilePropertyValues);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveProfileProperties_args(");
      boolean first = true;

      sb.append("profilePropertyValues:");
      if (this.profilePropertyValues == null) {
        sb.append("null");
      } else {
        sb.append(this.profilePropertyValues);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveProfileProperties_argsStandardSchemeFactory implements SchemeFactory {
      public saveProfileProperties_argsStandardScheme getScheme() {
        return new saveProfileProperties_argsStandardScheme();
      }
    }

    private static class saveProfileProperties_argsStandardScheme extends StandardScheme<saveProfileProperties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveProfileProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // PROFILE_PROPERTY_VALUES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                  struct.profilePropertyValues = new ArrayList<ProfilePropertyValue>(_list156.size);
                  for (int _i157 = 0; _i157 < _list156.size; ++_i157)
                  {
                    ProfilePropertyValue _elem158; // required
                    _elem158 = new ProfilePropertyValue();
                    _elem158.read(iprot);
                    struct.profilePropertyValues.add(_elem158);
                  }
                  iprot.readListEnd();
                }
                struct.setProfilePropertyValuesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveProfileProperties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profilePropertyValues != null) {
          oprot.writeFieldBegin(PROFILE_PROPERTY_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profilePropertyValues.size()));
            for (ProfilePropertyValue _iter159 : struct.profilePropertyValues)
            {
              _iter159.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveProfileProperties_argsTupleSchemeFactory implements SchemeFactory {
      public saveProfileProperties_argsTupleScheme getScheme() {
        return new saveProfileProperties_argsTupleScheme();
      }
    }

    private static class saveProfileProperties_argsTupleScheme extends TupleScheme<saveProfileProperties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveProfileProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfilePropertyValues()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfilePropertyValues()) {
          {
            oprot.writeI32(struct.profilePropertyValues.size());
            for (ProfilePropertyValue _iter160 : struct.profilePropertyValues)
            {
              _iter160.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveProfileProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profilePropertyValues = new ArrayList<ProfilePropertyValue>(_list161.size);
            for (int _i162 = 0; _i162 < _list161.size; ++_i162)
            {
              ProfilePropertyValue _elem163; // required
              _elem163 = new ProfilePropertyValue();
              _elem163.read(iprot);
              struct.profilePropertyValues.add(_elem163);
            }
          }
          struct.setProfilePropertyValuesIsSet(true);
        }
      }
    }

  }

  public static class saveProfileProperties_result implements org.apache.thrift.TBase<saveProfileProperties_result, saveProfileProperties_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveProfileProperties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField P13_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13ServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveProfileProperties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveProfileProperties_resultTupleSchemeFactory());
    }

    public int success; // required
    public P13ServiceException p13ServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13_SERVICE_EXCEPTION((short)1, "p13ServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13_SERVICE_EXCEPTION
            return P13_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P13_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13ServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveProfileProperties_result.class, metaDataMap);
    }

    public saveProfileProperties_result() {
    }

    public saveProfileProperties_result(
      int success,
      P13ServiceException p13ServiceException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.p13ServiceException = p13ServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveProfileProperties_result(saveProfileProperties_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetP13ServiceException()) {
        this.p13ServiceException = new P13ServiceException(other.p13ServiceException);
      }
    }

    public saveProfileProperties_result deepCopy() {
      return new saveProfileProperties_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.p13ServiceException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveProfileProperties_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public P13ServiceException getP13ServiceException() {
      return this.p13ServiceException;
    }

    public saveProfileProperties_result setP13ServiceException(P13ServiceException p13ServiceException) {
      this.p13ServiceException = p13ServiceException;
      return this;
    }

    public void unsetP13ServiceException() {
      this.p13ServiceException = null;
    }

    /** Returns true if field p13ServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13ServiceException() {
      return this.p13ServiceException != null;
    }

    public void setP13ServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13ServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case P13_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13ServiceException();
        } else {
          setP13ServiceException((P13ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case P13_SERVICE_EXCEPTION:
        return getP13ServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13_SERVICE_EXCEPTION:
        return isSetP13ServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveProfileProperties_result)
        return this.equals((saveProfileProperties_result)that);
      return false;
    }

    public boolean equals(saveProfileProperties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_p13ServiceException = true && this.isSetP13ServiceException();
      boolean that_present_p13ServiceException = true && that.isSetP13ServiceException();
      if (this_present_p13ServiceException || that_present_p13ServiceException) {
        if (!(this_present_p13ServiceException && that_present_p13ServiceException))
          return false;
        if (!this.p13ServiceException.equals(that.p13ServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveProfileProperties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveProfileProperties_result typedOther = (saveProfileProperties_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13ServiceException()).compareTo(typedOther.isSetP13ServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13ServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13ServiceException, typedOther.p13ServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveProfileProperties_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13ServiceException:");
      if (this.p13ServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13ServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveProfileProperties_resultStandardSchemeFactory implements SchemeFactory {
      public saveProfileProperties_resultStandardScheme getScheme() {
        return new saveProfileProperties_resultStandardScheme();
      }
    }

    private static class saveProfileProperties_resultStandardScheme extends StandardScheme<saveProfileProperties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveProfileProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13ServiceException = new P13ServiceException();
                struct.p13ServiceException.read(iprot);
                struct.setP13ServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveProfileProperties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.p13ServiceException != null) {
          oprot.writeFieldBegin(P13_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13ServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveProfileProperties_resultTupleSchemeFactory implements SchemeFactory {
      public saveProfileProperties_resultTupleScheme getScheme() {
        return new saveProfileProperties_resultTupleScheme();
      }
    }

    private static class saveProfileProperties_resultTupleScheme extends TupleScheme<saveProfileProperties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveProfileProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13ServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetP13ServiceException()) {
          struct.p13ServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveProfileProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13ServiceException = new P13ServiceException();
          struct.p13ServiceException.read(iprot);
          struct.setP13ServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class command_args implements org.apache.thrift.TBase<command_args, command_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("command_args");

    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new command_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new command_argsTupleSchemeFactory());
    }

    public String command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMAND((short)-1, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(command_args.class, metaDataMap);
    }

    public command_args() {
    }

    public command_args(
      String command)
    {
      this();
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public command_args(command_args other) {
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public command_args deepCopy() {
      return new command_args(this);
    }

    @Override
    public void clear() {
      this.command = null;
    }

    public String getCommand() {
      return this.command;
    }

    public command_args setCommand(String command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof command_args)
        return this.equals((command_args)that);
      return false;
    }

    public boolean equals(command_args that) {
      if (that == null)
        return false;

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(command_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      command_args typedOther = (command_args)other;

      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(typedOther.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, typedOther.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("command_args(");
      boolean first = true;

      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class command_argsStandardSchemeFactory implements SchemeFactory {
      public command_argsStandardScheme getScheme() {
        return new command_argsStandardScheme();
      }
    }

    private static class command_argsStandardScheme extends StandardScheme<command_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, command_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.command = iprot.readString();
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, command_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class command_argsTupleSchemeFactory implements SchemeFactory {
      public command_argsTupleScheme getScheme() {
        return new command_argsTupleScheme();
      }
    }

    private static class command_argsTupleScheme extends TupleScheme<command_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, command_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommand()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommand()) {
          oprot.writeString(struct.command);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, command_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.command = iprot.readString();
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class command_result implements org.apache.thrift.TBase<command_result, command_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("command_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField P13_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13ServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new command_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new command_resultTupleSchemeFactory());
    }

    public String success; // required
    public P13ServiceException p13ServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13_SERVICE_EXCEPTION((short)1, "p13ServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13_SERVICE_EXCEPTION
            return P13_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.P13_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13ServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(command_result.class, metaDataMap);
    }

    public command_result() {
    }

    public command_result(
      String success,
      P13ServiceException p13ServiceException)
    {
      this();
      this.success = success;
      this.p13ServiceException = p13ServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public command_result(command_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetP13ServiceException()) {
        this.p13ServiceException = new P13ServiceException(other.p13ServiceException);
      }
    }

    public command_result deepCopy() {
      return new command_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13ServiceException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public command_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13ServiceException getP13ServiceException() {
      return this.p13ServiceException;
    }

    public command_result setP13ServiceException(P13ServiceException p13ServiceException) {
      this.p13ServiceException = p13ServiceException;
      return this;
    }

    public void unsetP13ServiceException() {
      this.p13ServiceException = null;
    }

    /** Returns true if field p13ServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13ServiceException() {
      return this.p13ServiceException != null;
    }

    public void setP13ServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13ServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case P13_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13ServiceException();
        } else {
          setP13ServiceException((P13ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13_SERVICE_EXCEPTION:
        return getP13ServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13_SERVICE_EXCEPTION:
        return isSetP13ServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof command_result)
        return this.equals((command_result)that);
      return false;
    }

    public boolean equals(command_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13ServiceException = true && this.isSetP13ServiceException();
      boolean that_present_p13ServiceException = true && that.isSetP13ServiceException();
      if (this_present_p13ServiceException || that_present_p13ServiceException) {
        if (!(this_present_p13ServiceException && that_present_p13ServiceException))
          return false;
        if (!this.p13ServiceException.equals(that.p13ServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(command_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      command_result typedOther = (command_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13ServiceException()).compareTo(typedOther.isSetP13ServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13ServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13ServiceException, typedOther.p13ServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("command_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13ServiceException:");
      if (this.p13ServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13ServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class command_resultStandardSchemeFactory implements SchemeFactory {
      public command_resultStandardScheme getScheme() {
        return new command_resultStandardScheme();
      }
    }

    private static class command_resultStandardScheme extends StandardScheme<command_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, command_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13ServiceException = new P13ServiceException();
                struct.p13ServiceException.read(iprot);
                struct.setP13ServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, command_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.p13ServiceException != null) {
          oprot.writeFieldBegin(P13_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13ServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class command_resultTupleSchemeFactory implements SchemeFactory {
      public command_resultTupleScheme getScheme() {
        return new command_resultTupleScheme();
      }
    }

    private static class command_resultTupleScheme extends TupleScheme<command_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, command_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13ServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetP13ServiceException()) {
          struct.p13ServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, command_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13ServiceException = new P13ServiceException();
          struct.p13ServiceException.read(iprot);
          struct.setP13ServiceExceptionIsSet(true);
        }
      }
    }

  }

  public static class batchChoose_args implements org.apache.thrift.TBase<batchChoose_args, batchChoose_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchChoose_args");

    private static final org.apache.thrift.protocol.TField BATCH_CHOICE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("batchChoiceRequest", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchChoose_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchChoose_argsTupleSchemeFactory());
    }

    public BatchChoiceRequest batchChoiceRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_CHOICE_REQUEST((short)-1, "batchChoiceRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // BATCH_CHOICE_REQUEST
            return BATCH_CHOICE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_CHOICE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("batchChoiceRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchChoiceRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchChoose_args.class, metaDataMap);
    }

    public batchChoose_args() {
    }

    public batchChoose_args(
      BatchChoiceRequest batchChoiceRequest)
    {
      this();
      this.batchChoiceRequest = batchChoiceRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchChoose_args(batchChoose_args other) {
      if (other.isSetBatchChoiceRequest()) {
        this.batchChoiceRequest = new BatchChoiceRequest(other.batchChoiceRequest);
      }
    }

    public batchChoose_args deepCopy() {
      return new batchChoose_args(this);
    }

    @Override
    public void clear() {
      this.batchChoiceRequest = null;
    }

    public BatchChoiceRequest getBatchChoiceRequest() {
      return this.batchChoiceRequest;
    }

    public batchChoose_args setBatchChoiceRequest(BatchChoiceRequest batchChoiceRequest) {
      this.batchChoiceRequest = batchChoiceRequest;
      return this;
    }

    public void unsetBatchChoiceRequest() {
      this.batchChoiceRequest = null;
    }

    /** Returns true if field batchChoiceRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchChoiceRequest() {
      return this.batchChoiceRequest != null;
    }

    public void setBatchChoiceRequestIsSet(boolean value) {
      if (!value) {
        this.batchChoiceRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_CHOICE_REQUEST:
        if (value == null) {
          unsetBatchChoiceRequest();
        } else {
          setBatchChoiceRequest((BatchChoiceRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_CHOICE_REQUEST:
        return getBatchChoiceRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_CHOICE_REQUEST:
        return isSetBatchChoiceRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchChoose_args)
        return this.equals((batchChoose_args)that);
      return false;
    }

    public boolean equals(batchChoose_args that) {
      if (that == null)
        return false;

      boolean this_present_batchChoiceRequest = true && this.isSetBatchChoiceRequest();
      boolean that_present_batchChoiceRequest = true && that.isSetBatchChoiceRequest();
      if (this_present_batchChoiceRequest || that_present_batchChoiceRequest) {
        if (!(this_present_batchChoiceRequest && that_present_batchChoiceRequest))
          return false;
        if (!this.batchChoiceRequest.equals(that.batchChoiceRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batchChoose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batchChoose_args typedOther = (batchChoose_args)other;

      lastComparison = Boolean.valueOf(isSetBatchChoiceRequest()).compareTo(typedOther.isSetBatchChoiceRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchChoiceRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchChoiceRequest, typedOther.batchChoiceRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchChoose_args(");
      boolean first = true;

      sb.append("batchChoiceRequest:");
      if (this.batchChoiceRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.batchChoiceRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (batchChoiceRequest != null) {
        batchChoiceRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchChoose_argsStandardSchemeFactory implements SchemeFactory {
      public batchChoose_argsStandardScheme getScheme() {
        return new batchChoose_argsStandardScheme();
      }
    }

    private static class batchChoose_argsStandardScheme extends StandardScheme<batchChoose_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchChoose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // BATCH_CHOICE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.batchChoiceRequest = new BatchChoiceRequest();
                struct.batchChoiceRequest.read(iprot);
                struct.setBatchChoiceRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchChoose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchChoiceRequest != null) {
          oprot.writeFieldBegin(BATCH_CHOICE_REQUEST_FIELD_DESC);
          struct.batchChoiceRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchChoose_argsTupleSchemeFactory implements SchemeFactory {
      public batchChoose_argsTupleScheme getScheme() {
        return new batchChoose_argsTupleScheme();
      }
    }

    private static class batchChoose_argsTupleScheme extends TupleScheme<batchChoose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchChoose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBatchChoiceRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBatchChoiceRequest()) {
          struct.batchChoiceRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchChoose_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.batchChoiceRequest = new BatchChoiceRequest();
          struct.batchChoiceRequest.read(iprot);
          struct.setBatchChoiceRequestIsSet(true);
        }
      }
    }

  }

  public static class batchChoose_result implements org.apache.thrift.TBase<batchChoose_result, batchChoose_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchChoose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField P13_SERVICE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("p13ServiceException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchChoose_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchChoose_resultTupleSchemeFactory());
    }

    public BatchChoiceResponse success; // required
    public P13ServiceException p13ServiceException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      P13_SERVICE_EXCEPTION((short)1, "p13ServiceException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // P13_SERVICE_EXCEPTION
            return P13_SERVICE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchChoiceResponse.class)));
      tmpMap.put(_Fields.P13_SERVICE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("p13ServiceException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchChoose_result.class, metaDataMap);
    }

    public batchChoose_result() {
    }

    public batchChoose_result(
      BatchChoiceResponse success,
      P13ServiceException p13ServiceException)
    {
      this();
      this.success = success;
      this.p13ServiceException = p13ServiceException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchChoose_result(batchChoose_result other) {
      if (other.isSetSuccess()) {
        this.success = new BatchChoiceResponse(other.success);
      }
      if (other.isSetP13ServiceException()) {
        this.p13ServiceException = new P13ServiceException(other.p13ServiceException);
      }
    }

    public batchChoose_result deepCopy() {
      return new batchChoose_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.p13ServiceException = null;
    }

    public BatchChoiceResponse getSuccess() {
      return this.success;
    }

    public batchChoose_result setSuccess(BatchChoiceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public P13ServiceException getP13ServiceException() {
      return this.p13ServiceException;
    }

    public batchChoose_result setP13ServiceException(P13ServiceException p13ServiceException) {
      this.p13ServiceException = p13ServiceException;
      return this;
    }

    public void unsetP13ServiceException() {
      this.p13ServiceException = null;
    }

    /** Returns true if field p13ServiceException is set (has been assigned a value) and false otherwise */
    public boolean isSetP13ServiceException() {
      return this.p13ServiceException != null;
    }

    public void setP13ServiceExceptionIsSet(boolean value) {
      if (!value) {
        this.p13ServiceException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BatchChoiceResponse)value);
        }
        break;

      case P13_SERVICE_EXCEPTION:
        if (value == null) {
          unsetP13ServiceException();
        } else {
          setP13ServiceException((P13ServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case P13_SERVICE_EXCEPTION:
        return getP13ServiceException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case P13_SERVICE_EXCEPTION:
        return isSetP13ServiceException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchChoose_result)
        return this.equals((batchChoose_result)that);
      return false;
    }

    public boolean equals(batchChoose_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_p13ServiceException = true && this.isSetP13ServiceException();
      boolean that_present_p13ServiceException = true && that.isSetP13ServiceException();
      if (this_present_p13ServiceException || that_present_p13ServiceException) {
        if (!(this_present_p13ServiceException && that_present_p13ServiceException))
          return false;
        if (!this.p13ServiceException.equals(that.p13ServiceException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batchChoose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batchChoose_result typedOther = (batchChoose_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP13ServiceException()).compareTo(typedOther.isSetP13ServiceException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP13ServiceException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p13ServiceException, typedOther.p13ServiceException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchChoose_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("p13ServiceException:");
      if (this.p13ServiceException == null) {
        sb.append("null");
      } else {
        sb.append(this.p13ServiceException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchChoose_resultStandardSchemeFactory implements SchemeFactory {
      public batchChoose_resultStandardScheme getScheme() {
        return new batchChoose_resultStandardScheme();
      }
    }

    private static class batchChoose_resultStandardScheme extends StandardScheme<batchChoose_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchChoose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BatchChoiceResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // P13_SERVICE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p13ServiceException = new P13ServiceException();
                struct.p13ServiceException.read(iprot);
                struct.setP13ServiceExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchChoose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.p13ServiceException != null) {
          oprot.writeFieldBegin(P13_SERVICE_EXCEPTION_FIELD_DESC);
          struct.p13ServiceException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchChoose_resultTupleSchemeFactory implements SchemeFactory {
      public batchChoose_resultTupleScheme getScheme() {
        return new batchChoose_resultTupleScheme();
      }
    }

    private static class batchChoose_resultTupleScheme extends TupleScheme<batchChoose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchChoose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetP13ServiceException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetP13ServiceException()) {
          struct.p13ServiceException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchChoose_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BatchChoiceResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p13ServiceException = new P13ServiceException();
          struct.p13ServiceException.read(iprot);
          struct.setP13ServiceExceptionIsSet(true);
        }
      }
    }

  }

}
