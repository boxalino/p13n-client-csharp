/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.boxalino.p13n.api.thrift
{

  /// <summary>
  /// <dl>
  /// <dt>profileId</dt>
  /// <dd>profile (visitor) identificator</dd>
  /// 
  /// <dt>inquiries</dt>
  /// <dd>list of inquiries to be executed sequentially.</dd>
  /// <dd>Inquiries with higher index may depend from those with lower index.</dd>
  /// 
  /// <dt>requestContext</dt>
  /// <dd>context of the request</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChoiceRequest : TBase
  {
    private UserRecord _userRecord;
    private string _profileId;
    private List<ChoiceInquiry> _inquiries;
    private RequestContext _requestContext;

    public UserRecord UserRecord
    {
      get
      {
        return _userRecord;
      }
      set
      {
        __isset.userRecord = true;
        this._userRecord = value;
      }
    }

    public string ProfileId
    {
      get
      {
        return _profileId;
      }
      set
      {
        __isset.profileId = true;
        this._profileId = value;
      }
    }

    public List<ChoiceInquiry> Inquiries
    {
      get
      {
        return _inquiries;
      }
      set
      {
        __isset.inquiries = true;
        this._inquiries = value;
      }
    }

    public RequestContext RequestContext
    {
      get
      {
        return _requestContext;
      }
      set
      {
        __isset.requestContext = true;
        this._requestContext = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userRecord;
      public bool profileId;
      public bool inquiries;
      public bool requestContext;
    }

    public ChoiceRequest() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              UserRecord = new UserRecord();
              UserRecord.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ProfileId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Inquiries = new List<ChoiceInquiry>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  ChoiceInquiry _elem51;
                  _elem51 = new ChoiceInquiry();
                  _elem51.Read(iprot);
                  Inquiries.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              RequestContext = new RequestContext();
              RequestContext.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ChoiceRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserRecord != null && __isset.userRecord) {
        field.Name = "userRecord";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        UserRecord.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ProfileId != null && __isset.profileId) {
        field.Name = "profileId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProfileId);
        oprot.WriteFieldEnd();
      }
      if (Inquiries != null && __isset.inquiries) {
        field.Name = "inquiries";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Inquiries.Count));
          foreach (ChoiceInquiry _iter52 in Inquiries)
          {
            _iter52.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RequestContext != null && __isset.requestContext) {
        field.Name = "requestContext";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        RequestContext.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChoiceRequest(");
      bool __first = true;
      if (UserRecord != null && __isset.userRecord) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserRecord: ");
        __sb.Append(UserRecord== null ? "<null>" : UserRecord.ToString());
      }
      if (ProfileId != null && __isset.profileId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfileId: ");
        __sb.Append(ProfileId);
      }
      if (Inquiries != null && __isset.inquiries) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Inquiries: ");
        __sb.Append(Inquiries);
      }
      if (RequestContext != null && __isset.requestContext) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestContext: ");
        __sb.Append(RequestContext== null ? "<null>" : RequestContext.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
