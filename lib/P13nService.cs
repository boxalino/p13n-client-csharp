/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class P13nService {
  public interface Iface {
    /// <summary>
    /// <dl>
    /// <dt>@param choiceRequest</dt>
    /// <dd>the ChoiceRequest object containing your request</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a ChoiceResponse object containing the list of variants</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="choiceRequest"></param>
    ChoiceResponse choose(ChoiceRequest choiceRequest);
    #if SILVERLIGHT
    IAsyncResult Begin_choose(AsyncCallback callback, object state, ChoiceRequest choiceRequest);
    ChoiceResponse End_choose(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// <dl>
    /// <dt>@param batchChoiceRequest</dt>
    /// <dd>the BatchChoiceRequest object containing your requests</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a BatchChoiceResponse object containing the list of variants for each request</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="batchChoiceRequest"></param>
    BatchChoiceResponse batchChoose(BatchChoiceRequest batchChoiceRequest);
    #if SILVERLIGHT
    IAsyncResult Begin_batchChoose(AsyncCallback callback, object state, BatchChoiceRequest batchChoiceRequest);
    BatchChoiceResponse End_batchChoose(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// <dl>
    /// <dt>@param request</dt>
    /// <dd>the AutocompleteRequest object containing your request</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a AutocompleteResponse object containing the list of hits</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="request"></param>
    AutocompleteResponse autocomplete(AutocompleteRequest request);
    #if SILVERLIGHT
    IAsyncResult Begin_autocomplete(AsyncCallback callback, object state, AutocompleteRequest request);
    AutocompleteResponse End_autocomplete(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Updating a choice or creating a new choice if choiceId is not given in choiceUpdateRequest.
    /// </summary>
    /// <param name="choiceUpdateRequest"></param>
    ChoiceUpdateResponse updateChoice(ChoiceUpdateRequest choiceUpdateRequest);
    #if SILVERLIGHT
    IAsyncResult Begin_updateChoice(AsyncCallback callback, object state, ChoiceUpdateRequest choiceUpdateRequest);
    ChoiceUpdateResponse End_updateChoice(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_choose(AsyncCallback callback, object state, ChoiceRequest choiceRequest)
    {
      return send_choose(callback, state, choiceRequest);
    }

    public ChoiceResponse End_choose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_choose();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param choiceRequest</dt>
    /// <dd>the ChoiceRequest object containing your request</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a ChoiceResponse object containing the list of variants</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="choiceRequest"></param>
    public ChoiceResponse choose(ChoiceRequest choiceRequest)
    {
      #if !SILVERLIGHT
      send_choose(choiceRequest);
      return recv_choose();

      #else
      var asyncResult = Begin_choose(null, null, choiceRequest);
      return End_choose(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_choose(AsyncCallback callback, object state, ChoiceRequest choiceRequest)
    #else
    public void send_choose(ChoiceRequest choiceRequest)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("choose", TMessageType.Call, seqid_));
      choose_args args = new choose_args();
      args.ChoiceRequest = choiceRequest;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChoiceResponse recv_choose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      choose_result result = new choose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "choose failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_batchChoose(AsyncCallback callback, object state, BatchChoiceRequest batchChoiceRequest)
    {
      return send_batchChoose(callback, state, batchChoiceRequest);
    }

    public BatchChoiceResponse End_batchChoose(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_batchChoose();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param batchChoiceRequest</dt>
    /// <dd>the BatchChoiceRequest object containing your requests</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a BatchChoiceResponse object containing the list of variants for each request</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="batchChoiceRequest"></param>
    public BatchChoiceResponse batchChoose(BatchChoiceRequest batchChoiceRequest)
    {
      #if !SILVERLIGHT
      send_batchChoose(batchChoiceRequest);
      return recv_batchChoose();

      #else
      var asyncResult = Begin_batchChoose(null, null, batchChoiceRequest);
      return End_batchChoose(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_batchChoose(AsyncCallback callback, object state, BatchChoiceRequest batchChoiceRequest)
    #else
    public void send_batchChoose(BatchChoiceRequest batchChoiceRequest)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("batchChoose", TMessageType.Call, seqid_));
      batchChoose_args args = new batchChoose_args();
      args.BatchChoiceRequest = batchChoiceRequest;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public BatchChoiceResponse recv_batchChoose()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      batchChoose_result result = new batchChoose_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batchChoose failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_autocomplete(AsyncCallback callback, object state, AutocompleteRequest request)
    {
      return send_autocomplete(callback, state, request);
    }

    public AutocompleteResponse End_autocomplete(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_autocomplete();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param request</dt>
    /// <dd>the AutocompleteRequest object containing your request</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a AutocompleteResponse object containing the list of hits</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="request"></param>
    public AutocompleteResponse autocomplete(AutocompleteRequest request)
    {
      #if !SILVERLIGHT
      send_autocomplete(request);
      return recv_autocomplete();

      #else
      var asyncResult = Begin_autocomplete(null, null, request);
      return End_autocomplete(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_autocomplete(AsyncCallback callback, object state, AutocompleteRequest request)
    #else
    public void send_autocomplete(AutocompleteRequest request)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("autocomplete", TMessageType.Call, seqid_));
      autocomplete_args args = new autocomplete_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public AutocompleteResponse recv_autocomplete()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      autocomplete_result result = new autocomplete_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "autocomplete failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updateChoice(AsyncCallback callback, object state, ChoiceUpdateRequest choiceUpdateRequest)
    {
      return send_updateChoice(callback, state, choiceUpdateRequest);
    }

    public ChoiceUpdateResponse End_updateChoice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateChoice();
    }

    #endif

    /// <summary>
    /// Updating a choice or creating a new choice if choiceId is not given in choiceUpdateRequest.
    /// </summary>
    /// <param name="choiceUpdateRequest"></param>
    public ChoiceUpdateResponse updateChoice(ChoiceUpdateRequest choiceUpdateRequest)
    {
      #if !SILVERLIGHT
      send_updateChoice(choiceUpdateRequest);
      return recv_updateChoice();

      #else
      var asyncResult = Begin_updateChoice(null, null, choiceUpdateRequest);
      return End_updateChoice(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateChoice(AsyncCallback callback, object state, ChoiceUpdateRequest choiceUpdateRequest)
    #else
    public void send_updateChoice(ChoiceUpdateRequest choiceUpdateRequest)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updateChoice", TMessageType.Call, seqid_));
      updateChoice_args args = new updateChoice_args();
      args.ChoiceUpdateRequest = choiceUpdateRequest;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChoiceUpdateResponse recv_updateChoice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateChoice_result result = new updateChoice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateChoice failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["choose"] = choose_Process;
      processMap_["batchChoose"] = batchChoose_Process;
      processMap_["autocomplete"] = autocomplete_Process;
      processMap_["updateChoice"] = updateChoice_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void choose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      choose_args args = new choose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      choose_result result = new choose_result();
      try {
        result.Success = iface_.choose(args.ChoiceRequest);
      } catch (P13nServiceException p13nServiceException) {
        result.P13nServiceException = p13nServiceException;
      }
      oprot.WriteMessageBegin(new TMessage("choose", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void batchChoose_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      batchChoose_args args = new batchChoose_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      batchChoose_result result = new batchChoose_result();
      try {
        result.Success = iface_.batchChoose(args.BatchChoiceRequest);
      } catch (P13nServiceException p13nServiceException) {
        result.P13nServiceException = p13nServiceException;
      }
      oprot.WriteMessageBegin(new TMessage("batchChoose", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void autocomplete_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      autocomplete_args args = new autocomplete_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      autocomplete_result result = new autocomplete_result();
      try {
        result.Success = iface_.autocomplete(args.Request);
      } catch (P13nServiceException p13nServiceException) {
        result.P13nServiceException = p13nServiceException;
      }
      oprot.WriteMessageBegin(new TMessage("autocomplete", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateChoice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateChoice_args args = new updateChoice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateChoice_result result = new updateChoice_result();
      try {
        result.Success = iface_.updateChoice(args.ChoiceUpdateRequest);
      } catch (P13nServiceException p13nServiceException) {
        result.P13nServiceException = p13nServiceException;
      }
      oprot.WriteMessageBegin(new TMessage("updateChoice", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class choose_args : TBase
  {
    private ChoiceRequest _choiceRequest;

    public ChoiceRequest ChoiceRequest
    {
      get
      {
        return _choiceRequest;
      }
      set
      {
        __isset.choiceRequest = true;
        this._choiceRequest = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool choiceRequest;
    }

    public choose_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              ChoiceRequest = new ChoiceRequest();
              ChoiceRequest.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("choose_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChoiceRequest != null && __isset.choiceRequest) {
        field.Name = "choiceRequest";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        ChoiceRequest.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("choose_args(");
      bool __first = true;
      if (ChoiceRequest != null && __isset.choiceRequest) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChoiceRequest: ");
        __sb.Append(ChoiceRequest== null ? "<null>" : ChoiceRequest.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class choose_result : TBase
  {
    private ChoiceResponse _success;
    private P13nServiceException _p13nServiceException;

    public ChoiceResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public choose_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new ChoiceResponse();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              P13nServiceException = new P13nServiceException();
              P13nServiceException.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("choose_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.p13nServiceException) {
        if (P13nServiceException != null) {
          field.Name = "P13nServiceException";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          P13nServiceException.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("choose_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class batchChoose_args : TBase
  {
    private BatchChoiceRequest _batchChoiceRequest;

    public BatchChoiceRequest BatchChoiceRequest
    {
      get
      {
        return _batchChoiceRequest;
      }
      set
      {
        __isset.batchChoiceRequest = true;
        this._batchChoiceRequest = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool batchChoiceRequest;
    }

    public batchChoose_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              BatchChoiceRequest = new BatchChoiceRequest();
              BatchChoiceRequest.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batchChoose_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BatchChoiceRequest != null && __isset.batchChoiceRequest) {
        field.Name = "batchChoiceRequest";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        BatchChoiceRequest.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("batchChoose_args(");
      bool __first = true;
      if (BatchChoiceRequest != null && __isset.batchChoiceRequest) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BatchChoiceRequest: ");
        __sb.Append(BatchChoiceRequest== null ? "<null>" : BatchChoiceRequest.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class batchChoose_result : TBase
  {
    private BatchChoiceResponse _success;
    private P13nServiceException _p13nServiceException;

    public BatchChoiceResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public batchChoose_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new BatchChoiceResponse();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              P13nServiceException = new P13nServiceException();
              P13nServiceException.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batchChoose_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.p13nServiceException) {
        if (P13nServiceException != null) {
          field.Name = "P13nServiceException";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          P13nServiceException.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("batchChoose_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class autocomplete_args : TBase
  {
    private AutocompleteRequest _request;

    public AutocompleteRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public autocomplete_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              Request = new AutocompleteRequest();
              Request.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("autocomplete_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Request != null && __isset.request) {
        field.Name = "request";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        Request.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("autocomplete_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class autocomplete_result : TBase
  {
    private AutocompleteResponse _success;
    private P13nServiceException _p13nServiceException;

    public AutocompleteResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public autocomplete_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new AutocompleteResponse();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              P13nServiceException = new P13nServiceException();
              P13nServiceException.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("autocomplete_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.p13nServiceException) {
        if (P13nServiceException != null) {
          field.Name = "P13nServiceException";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          P13nServiceException.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("autocomplete_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateChoice_args : TBase
  {
    private ChoiceUpdateRequest _choiceUpdateRequest;

    public ChoiceUpdateRequest ChoiceUpdateRequest
    {
      get
      {
        return _choiceUpdateRequest;
      }
      set
      {
        __isset.choiceUpdateRequest = true;
        this._choiceUpdateRequest = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool choiceUpdateRequest;
    }

    public updateChoice_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              ChoiceUpdateRequest = new ChoiceUpdateRequest();
              ChoiceUpdateRequest.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("updateChoice_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChoiceUpdateRequest != null && __isset.choiceUpdateRequest) {
        field.Name = "choiceUpdateRequest";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        ChoiceUpdateRequest.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateChoice_args(");
      bool __first = true;
      if (ChoiceUpdateRequest != null && __isset.choiceUpdateRequest) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChoiceUpdateRequest: ");
        __sb.Append(ChoiceUpdateRequest== null ? "<null>" : ChoiceUpdateRequest.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateChoice_result : TBase
  {
    private ChoiceUpdateResponse _success;
    private P13nServiceException _p13nServiceException;

    public ChoiceUpdateResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public updateChoice_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new ChoiceUpdateResponse();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              P13nServiceException = new P13nServiceException();
              P13nServiceException.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("updateChoice_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.p13nServiceException) {
        if (P13nServiceException != null) {
          field.Name = "P13nServiceException";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          P13nServiceException.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateChoice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
