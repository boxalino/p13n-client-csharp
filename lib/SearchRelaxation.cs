/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SearchRelaxation : TBase
{
  private List<SearchResult> _suggestionsResults;
  private List<SearchResult> _subphrasesResults;

  public List<SearchResult> SuggestionsResults
  {
    get
    {
      return _suggestionsResults;
    }
    set
    {
      __isset.suggestionsResults = true;
      this._suggestionsResults = value;
    }
  }

  public List<SearchResult> SubphrasesResults
  {
    get
    {
      return _subphrasesResults;
    }
    set
    {
      __isset.subphrasesResults = true;
      this._subphrasesResults = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool suggestionsResults;
    public bool subphrasesResults;
  }

  public SearchRelaxation() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.List) {
              {
                SuggestionsResults = new List<SearchResult>();
                TList _list96 = iprot.ReadListBegin();
                for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                {
                  SearchResult _elem98;
                  _elem98 = new SearchResult();
                  _elem98.Read(iprot);
                  SuggestionsResults.Add(_elem98);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                SubphrasesResults = new List<SearchResult>();
                TList _list99 = iprot.ReadListBegin();
                for( int _i100 = 0; _i100 < _list99.Count; ++_i100)
                {
                  SearchResult _elem101;
                  _elem101 = new SearchResult();
                  _elem101.Read(iprot);
                  SubphrasesResults.Add(_elem101);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SearchRelaxation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SuggestionsResults != null && __isset.suggestionsResults) {
        field.Name = "suggestionsResults";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SuggestionsResults.Count));
          foreach (SearchResult _iter102 in SuggestionsResults)
          {
            _iter102.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SubphrasesResults != null && __isset.subphrasesResults) {
        field.Name = "subphrasesResults";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SubphrasesResults.Count));
          foreach (SearchResult _iter103 in SubphrasesResults)
          {
            _iter103.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SearchRelaxation(");
    bool __first = true;
    if (SuggestionsResults != null && __isset.suggestionsResults) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SuggestionsResults: ");
      __sb.Append(SuggestionsResults);
    }
    if (SubphrasesResults != null && __isset.subphrasesResults) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SubphrasesResults: ");
      __sb.Append(SubphrasesResults);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

