/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// list of personalized variants. Item's index corresponds to the index of the
/// ChoiceInquiry
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class ChoiceResponse : TBase
{
  private List<Variant> _variants;

  public List<Variant> Variants
  {
    get
    {
      return _variants;
    }
    set
    {
      __isset.variants = true;
      this._variants = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool variants;
  }

  public ChoiceResponse() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.List) {
            {
              Variants = new List<Variant>();
              TList _list94 = iprot.ReadListBegin();
              for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
              {
                Variant _elem96;
                _elem96 = new Variant();
                _elem96.Read(iprot);
                Variants.Add(_elem96);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("ChoiceResponse");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Variants != null && __isset.variants) {
      field.Name = "variants";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Variants.Count));
        foreach (Variant _iter97 in Variants)
        {
          _iter97.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ChoiceResponse(");
    bool __first = true;
    if (Variants != null && __isset.variants) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Variants: ");
      __sb.Append(Variants);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

