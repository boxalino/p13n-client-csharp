/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// <dl>
/// <dt>hits</dt>
/// <dd>list of hits found for given SimpleSearchQuery</dd>
/// 
/// <dt>facetResponses</dt>
/// <dd>list of requested facets or null if none requested</dd>
/// 
/// <dt>totalHitCount</dt>
/// <dd>total number of hits; -1 in case of mixed recommendation strategy</dd>
/// 
/// <dt>queryText</dt>
/// <dd>relaxation query text for relaxation results or requested queryText for a
/// regular SearchResult</dd>
/// 
/// <dt>hitsGroups</dt>
/// <dd>grouped hits; not null when corresponding SimplSearchQuery has
/// groupBy!=null </dd>
/// </dl>
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class SearchResult : TBase
{
  private List<Hit> _hits;
  private List<FacetResponse> _facetResponses;
  private long _totalHitCount;
  private string _queryText;
  private List<HitsGroup> _hitsGroups;

  public List<Hit> Hits
  {
    get
    {
      return _hits;
    }
    set
    {
      __isset.hits = true;
      this._hits = value;
    }
  }

  public List<FacetResponse> FacetResponses
  {
    get
    {
      return _facetResponses;
    }
    set
    {
      __isset.facetResponses = true;
      this._facetResponses = value;
    }
  }

  public long TotalHitCount
  {
    get
    {
      return _totalHitCount;
    }
    set
    {
      __isset.totalHitCount = true;
      this._totalHitCount = value;
    }
  }

  public string QueryText
  {
    get
    {
      return _queryText;
    }
    set
    {
      __isset.queryText = true;
      this._queryText = value;
    }
  }

  public List<HitsGroup> HitsGroups
  {
    get
    {
      return _hitsGroups;
    }
    set
    {
      __isset.hitsGroups = true;
      this._hitsGroups = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool hits;
    public bool facetResponses;
    public bool totalHitCount;
    public bool queryText;
    public bool hitsGroups;
  }

  public SearchResult() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.List) {
            {
              Hits = new List<Hit>();
              TList _list70 = iprot.ReadListBegin();
              for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
              {
                Hit _elem72;
                _elem72 = new Hit();
                _elem72.Read(iprot);
                Hits.Add(_elem72);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.List) {
            {
              FacetResponses = new List<FacetResponse>();
              TList _list73 = iprot.ReadListBegin();
              for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
              {
                FacetResponse _elem75;
                _elem75 = new FacetResponse();
                _elem75.Read(iprot);
                FacetResponses.Add(_elem75);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I64) {
            TotalHitCount = iprot.ReadI64();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 40:
          if (field.Type == TType.String) {
            QueryText = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 50:
          if (field.Type == TType.List) {
            {
              HitsGroups = new List<HitsGroup>();
              TList _list76 = iprot.ReadListBegin();
              for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
              {
                HitsGroup _elem78;
                _elem78 = new HitsGroup();
                _elem78.Read(iprot);
                HitsGroups.Add(_elem78);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("SearchResult");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Hits != null && __isset.hits) {
      field.Name = "hits";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Hits.Count));
        foreach (Hit _iter79 in Hits)
        {
          _iter79.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (FacetResponses != null && __isset.facetResponses) {
      field.Name = "facetResponses";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, FacetResponses.Count));
        foreach (FacetResponse _iter80 in FacetResponses)
        {
          _iter80.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (__isset.totalHitCount) {
      field.Name = "totalHitCount";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(TotalHitCount);
      oprot.WriteFieldEnd();
    }
    if (QueryText != null && __isset.queryText) {
      field.Name = "queryText";
      field.Type = TType.String;
      field.ID = 40;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(QueryText);
      oprot.WriteFieldEnd();
    }
    if (HitsGroups != null && __isset.hitsGroups) {
      field.Name = "hitsGroups";
      field.Type = TType.List;
      field.ID = 50;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, HitsGroups.Count));
        foreach (HitsGroup _iter81 in HitsGroups)
        {
          _iter81.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SearchResult(");
    bool __first = true;
    if (Hits != null && __isset.hits) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Hits: ");
      __sb.Append(Hits);
    }
    if (FacetResponses != null && __isset.facetResponses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FacetResponses: ");
      __sb.Append(FacetResponses);
    }
    if (__isset.totalHitCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalHitCount: ");
      __sb.Append(TotalHitCount);
    }
    if (QueryText != null && __isset.queryText) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("QueryText: ");
      __sb.Append(QueryText);
    }
    if (HitsGroups != null && __isset.hitsGroups) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HitsGroups: ");
      __sb.Append(HitsGroups);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

