/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class RecommendationVariant : TBase
{
  private string _id;
  private string _mode;
  private List<string> _scenarioIds;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Mode
  {
    get
    {
      return _mode;
    }
    set
    {
      __isset.mode = true;
      this._mode = value;
    }
  }

  public List<string> ScenarioIds
  {
    get
    {
      return _scenarioIds;
    }
    set
    {
      __isset.scenarioIds = true;
      this._scenarioIds = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool mode;
    public bool scenarioIds;
  }

  public RecommendationVariant() {
    this._mode = "firstfull";
    this.__isset.mode = true;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 11:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              Mode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.List) {
              {
                ScenarioIds = new List<string>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  string _elem17;
                  _elem17 = iprot.ReadString();
                  ScenarioIds.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RecommendationVariant");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Mode != null && __isset.mode) {
        field.Name = "mode";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mode);
        oprot.WriteFieldEnd();
      }
      if (ScenarioIds != null && __isset.scenarioIds) {
        field.Name = "scenarioIds";
        field.Type = TType.List;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ScenarioIds.Count));
          foreach (string _iter18 in ScenarioIds)
          {
            oprot.WriteString(_iter18);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RecommendationVariant(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Mode != null && __isset.mode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Mode: ");
      __sb.Append(Mode);
    }
    if (ScenarioIds != null && __isset.scenarioIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ScenarioIds: ");
      __sb.Append(ScenarioIds);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

