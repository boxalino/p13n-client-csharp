/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AutocompleteResponse : TBase
{
  private List<AutocompleteHit> _hits;
  private SearchResult _prefixSearchResult;
  private List<PropertyResult> _propertyResults;
  private Dictionary<string, string> _extraInfo;

  public List<AutocompleteHit> Hits
  {
    get
    {
      return _hits;
    }
    set
    {
      __isset.hits = true;
      this._hits = value;
    }
  }

  public SearchResult PrefixSearchResult
  {
    get
    {
      return _prefixSearchResult;
    }
    set
    {
      __isset.prefixSearchResult = true;
      this._prefixSearchResult = value;
    }
  }

  public List<PropertyResult> PropertyResults
  {
    get
    {
      return _propertyResults;
    }
    set
    {
      __isset.propertyResults = true;
      this._propertyResults = value;
    }
  }

  public Dictionary<string, string> ExtraInfo
  {
    get
    {
      return _extraInfo;
    }
    set
    {
      __isset.extraInfo = true;
      this._extraInfo = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool hits;
    public bool prefixSearchResult;
    public bool propertyResults;
    public bool extraInfo;
  }

  public AutocompleteResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 11:
            if (field.Type == TType.List) {
              {
                Hits = new List<AutocompleteHit>();
                TList _list157 = iprot.ReadListBegin();
                for( int _i158 = 0; _i158 < _list157.Count; ++_i158)
                {
                  AutocompleteHit _elem159;
                  _elem159 = new AutocompleteHit();
                  _elem159.Read(iprot);
                  Hits.Add(_elem159);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Struct) {
              PrefixSearchResult = new SearchResult();
              PrefixSearchResult.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.List) {
              {
                PropertyResults = new List<PropertyResult>();
                TList _list160 = iprot.ReadListBegin();
                for( int _i161 = 0; _i161 < _list160.Count; ++_i161)
                {
                  PropertyResult _elem162;
                  _elem162 = new PropertyResult();
                  _elem162.Read(iprot);
                  PropertyResults.Add(_elem162);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.Map) {
              {
                ExtraInfo = new Dictionary<string, string>();
                TMap _map163 = iprot.ReadMapBegin();
                for( int _i164 = 0; _i164 < _map163.Count; ++_i164)
                {
                  string _key165;
                  string _val166;
                  _key165 = iprot.ReadString();
                  _val166 = iprot.ReadString();
                  ExtraInfo[_key165] = _val166;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AutocompleteResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Hits != null && __isset.hits) {
        field.Name = "hits";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Hits.Count));
          foreach (AutocompleteHit _iter167 in Hits)
          {
            _iter167.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PrefixSearchResult != null && __isset.prefixSearchResult) {
        field.Name = "prefixSearchResult";
        field.Type = TType.Struct;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        PrefixSearchResult.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PropertyResults != null && __isset.propertyResults) {
        field.Name = "propertyResults";
        field.Type = TType.List;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PropertyResults.Count));
          foreach (PropertyResult _iter168 in PropertyResults)
          {
            _iter168.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExtraInfo != null && __isset.extraInfo) {
        field.Name = "extraInfo";
        field.Type = TType.Map;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ExtraInfo.Count));
          foreach (string _iter169 in ExtraInfo.Keys)
          {
            oprot.WriteString(_iter169);
            oprot.WriteString(ExtraInfo[_iter169]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AutocompleteResponse(");
    bool __first = true;
    if (Hits != null && __isset.hits) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Hits: ");
      __sb.Append(Hits);
    }
    if (PrefixSearchResult != null && __isset.prefixSearchResult) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrefixSearchResult: ");
      __sb.Append(PrefixSearchResult== null ? "<null>" : PrefixSearchResult.ToString());
    }
    if (PropertyResults != null && __isset.propertyResults) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PropertyResults: ");
      __sb.Append(PropertyResults);
    }
    if (ExtraInfo != null && __isset.extraInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExtraInfo: ");
      __sb.Append(ExtraInfo);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

