/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// parameters of request context. Usually browser, platform, etc.
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class RequestContext : TBase
{
  private Dictionary<string, List<string>> _parameters;

  public Dictionary<string, List<string>> Parameters
  {
    get
    {
      return _parameters;
    }
    set
    {
      __isset.parameters = true;
      this._parameters = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool parameters;
  }

  public RequestContext() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Parameters = new Dictionary<string, List<string>>();
                TMap _map49 = iprot.ReadMapBegin();
                for( int _i50 = 0; _i50 < _map49.Count; ++_i50)
                {
                  string _key51;
                  List<string> _val52;
                  _key51 = iprot.ReadString();
                  {
                    _val52 = new List<string>();
                    TList _list53 = iprot.ReadListBegin();
                    for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                    {
                      string _elem55;
                      _elem55 = iprot.ReadString();
                      _val52.Add(_elem55);
                    }
                    iprot.ReadListEnd();
                  }
                  Parameters[_key51] = _val52;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RequestContext");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Parameters != null && __isset.parameters) {
        field.Name = "parameters";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.List, Parameters.Count));
          foreach (string _iter56 in Parameters.Keys)
          {
            oprot.WriteString(_iter56);
            {
              oprot.WriteListBegin(new TList(TType.String, Parameters[_iter56].Count));
              foreach (string _iter57 in Parameters[_iter56])
              {
                oprot.WriteString(_iter57);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RequestContext(");
    bool __first = true;
    if (Parameters != null && __isset.parameters) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Parameters: ");
      __sb.Append(Parameters);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

