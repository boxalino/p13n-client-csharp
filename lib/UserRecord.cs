/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// unique identifier of the customer
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class UserRecord : TBase
{
  private string _username;
  private string _apiKey;
  private string _apiSecret;

  public string Username
  {
    get
    {
      return _username;
    }
    set
    {
      __isset.username = true;
      this._username = value;
    }
  }

  public string ApiKey
  {
    get
    {
      return _apiKey;
    }
    set
    {
      __isset.apiKey = true;
      this._apiKey = value;
    }
  }

  public string ApiSecret
  {
    get
    {
      return _apiSecret;
    }
    set
    {
      __isset.apiSecret = true;
      this._apiSecret = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool username;
    public bool apiKey;
    public bool apiSecret;
  }

  public UserRecord() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Username = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              ApiKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              ApiSecret = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("UserRecord");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Username != null && __isset.username) {
        field.Name = "username";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Username);
        oprot.WriteFieldEnd();
      }
      if (ApiKey != null && __isset.apiKey) {
        field.Name = "apiKey";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ApiKey);
        oprot.WriteFieldEnd();
      }
      if (ApiSecret != null && __isset.apiSecret) {
        field.Name = "apiSecret";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ApiSecret);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("UserRecord(");
    bool __first = true;
    if (Username != null && __isset.username) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Username: ");
      __sb.Append(Username);
    }
    if (ApiKey != null && __isset.apiKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ApiKey: ");
      __sb.Append(ApiKey);
    }
    if (ApiSecret != null && __isset.apiSecret) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ApiSecret: ");
      __sb.Append(ApiSecret);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

