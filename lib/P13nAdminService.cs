/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class P13nAdminService {
  public interface ISync {
    /// <summary>
    /// <dl>
    /// <dt>@param xmlPayload</dt>
    /// <dd>the XML to upload as raw data</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>binary data</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="xmlPayload"></param>
    byte[] uploadChoiceConfiguration(byte[] xmlPayload);
    /// <summary>
    /// <dl>
    /// <dt>@param profilePropertyValues</dt>
    /// <dd>the list of ProfilePropertyValue objects to save</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>an integer</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="profilePropertyValues"></param>
    int saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues);
    /// <summary>
    /// <dl>
    /// <dt>@param profilePropertyValues</dt>
    /// <dd>the list of ProfilePropertyValue objects to save</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>an integer</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="profilePropertyValues"></param>
    int replaceProfileProperties(List<ProfilePropertyValue> profilePropertyValues);
    /// <summary>
    /// <dl>
    /// <dt>@param command</dt>
    /// <dd>the command to execute</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a string containing the result of the command</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="command"></param>
    string command(string command);
    Choice retrieveChoice(string id);
    Scenario retrieveScenario(string id);
    RecommendationVariant retrieveRecommendationVariant(string id);
    string persistChoice(Choice choice);
    string persistScenario(Scenario scenario);
    string persistRecommendationVariant(RecommendationVariant recommendationVariant);
    void updateAuthEntry(AuthEntry authEntry);
    void deleteAuthEntry(AuthEntry authEntry);
    void updatePMMLModel(string id, byte[] xml);
    void deletePMMLModel(string id);
  }

  public interface Iface : ISync {
    /// <summary>
    /// <dl>
    /// <dt>@param xmlPayload</dt>
    /// <dd>the XML to upload as raw data</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>binary data</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="xmlPayload"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_uploadChoiceConfiguration(AsyncCallback callback, object state, byte[] xmlPayload);
    byte[] End_uploadChoiceConfiguration(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// <dl>
    /// <dt>@param profilePropertyValues</dt>
    /// <dd>the list of ProfilePropertyValue objects to save</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>an integer</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="profilePropertyValues"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_saveProfileProperties(AsyncCallback callback, object state, List<ProfilePropertyValue> profilePropertyValues);
    int End_saveProfileProperties(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// <dl>
    /// <dt>@param profilePropertyValues</dt>
    /// <dd>the list of ProfilePropertyValue objects to save</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>an integer</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="profilePropertyValues"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_replaceProfileProperties(AsyncCallback callback, object state, List<ProfilePropertyValue> profilePropertyValues);
    int End_replaceProfileProperties(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// <dl>
    /// <dt>@param command</dt>
    /// <dd>the command to execute</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a string containing the result of the command</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="command"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_command(AsyncCallback callback, object state, string command);
    string End_command(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_retrieveChoice(AsyncCallback callback, object state, string id);
    Choice End_retrieveChoice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_retrieveScenario(AsyncCallback callback, object state, string id);
    Scenario End_retrieveScenario(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_retrieveRecommendationVariant(AsyncCallback callback, object state, string id);
    RecommendationVariant End_retrieveRecommendationVariant(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_persistChoice(AsyncCallback callback, object state, Choice choice);
    string End_persistChoice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_persistScenario(AsyncCallback callback, object state, Scenario scenario);
    string End_persistScenario(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_persistRecommendationVariant(AsyncCallback callback, object state, RecommendationVariant recommendationVariant);
    string End_persistRecommendationVariant(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateAuthEntry(AsyncCallback callback, object state, AuthEntry authEntry);
    void End_updateAuthEntry(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteAuthEntry(AsyncCallback callback, object state, AuthEntry authEntry);
    void End_deleteAuthEntry(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updatePMMLModel(AsyncCallback callback, object state, string id, byte[] xml);
    void End_updatePMMLModel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deletePMMLModel(AsyncCallback callback, object state, string id);
    void End_deletePMMLModel(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_uploadChoiceConfiguration(AsyncCallback callback, object state, byte[] xmlPayload)
    {
      return send_uploadChoiceConfiguration(callback, state, xmlPayload);
    }

    public byte[] End_uploadChoiceConfiguration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_uploadChoiceConfiguration();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param xmlPayload</dt>
    /// <dd>the XML to upload as raw data</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>binary data</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="xmlPayload"></param>
    public byte[] uploadChoiceConfiguration(byte[] xmlPayload)
    {
      #if !SILVERLIGHT
      send_uploadChoiceConfiguration(xmlPayload);
      return recv_uploadChoiceConfiguration();

      #else
      var asyncResult = Begin_uploadChoiceConfiguration(null, null, xmlPayload);
      return End_uploadChoiceConfiguration(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_uploadChoiceConfiguration(AsyncCallback callback, object state, byte[] xmlPayload)
    #else
    public void send_uploadChoiceConfiguration(byte[] xmlPayload)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("uploadChoiceConfiguration", TMessageType.Call, seqid_));
      uploadChoiceConfiguration_args args = new uploadChoiceConfiguration_args();
      args.XmlPayload = xmlPayload;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public byte[] recv_uploadChoiceConfiguration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      uploadChoiceConfiguration_result result = new uploadChoiceConfiguration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadChoiceConfiguration failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_saveProfileProperties(AsyncCallback callback, object state, List<ProfilePropertyValue> profilePropertyValues)
    {
      return send_saveProfileProperties(callback, state, profilePropertyValues);
    }

    public int End_saveProfileProperties(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_saveProfileProperties();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param profilePropertyValues</dt>
    /// <dd>the list of ProfilePropertyValue objects to save</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>an integer</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="profilePropertyValues"></param>
    public int saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues)
    {
      #if !SILVERLIGHT
      send_saveProfileProperties(profilePropertyValues);
      return recv_saveProfileProperties();

      #else
      var asyncResult = Begin_saveProfileProperties(null, null, profilePropertyValues);
      return End_saveProfileProperties(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_saveProfileProperties(AsyncCallback callback, object state, List<ProfilePropertyValue> profilePropertyValues)
    #else
    public void send_saveProfileProperties(List<ProfilePropertyValue> profilePropertyValues)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("saveProfileProperties", TMessageType.Call, seqid_));
      saveProfileProperties_args args = new saveProfileProperties_args();
      args.ProfilePropertyValues = profilePropertyValues;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_saveProfileProperties()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      saveProfileProperties_result result = new saveProfileProperties_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saveProfileProperties failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_replaceProfileProperties(AsyncCallback callback, object state, List<ProfilePropertyValue> profilePropertyValues)
    {
      return send_replaceProfileProperties(callback, state, profilePropertyValues);
    }

    public int End_replaceProfileProperties(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_replaceProfileProperties();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param profilePropertyValues</dt>
    /// <dd>the list of ProfilePropertyValue objects to save</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>an integer</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="profilePropertyValues"></param>
    public int replaceProfileProperties(List<ProfilePropertyValue> profilePropertyValues)
    {
      #if !SILVERLIGHT
      send_replaceProfileProperties(profilePropertyValues);
      return recv_replaceProfileProperties();

      #else
      var asyncResult = Begin_replaceProfileProperties(null, null, profilePropertyValues);
      return End_replaceProfileProperties(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_replaceProfileProperties(AsyncCallback callback, object state, List<ProfilePropertyValue> profilePropertyValues)
    #else
    public void send_replaceProfileProperties(List<ProfilePropertyValue> profilePropertyValues)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("replaceProfileProperties", TMessageType.Call, seqid_));
      replaceProfileProperties_args args = new replaceProfileProperties_args();
      args.ProfilePropertyValues = profilePropertyValues;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_replaceProfileProperties()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      replaceProfileProperties_result result = new replaceProfileProperties_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "replaceProfileProperties failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_command(AsyncCallback callback, object state, string command)
    {
      return send_command(callback, state, command);
    }

    public string End_command(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_command();
    }

    #endif

    /// <summary>
    /// <dl>
    /// <dt>@param command</dt>
    /// <dd>the command to execute</dd>
    /// 
    /// <dt>@return</dt>
    /// <dd>a string containing the result of the command</dd>
    /// 
    /// <dt>@throws P13nServiceException</dt>
    /// <dd>an exception containing an error message</dd>
    /// </dl>
    /// </summary>
    /// <param name="command"></param>
    public string command(string command)
    {
      #if !SILVERLIGHT
      send_command(command);
      return recv_command();

      #else
      var asyncResult = Begin_command(null, null, command);
      return End_command(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_command(AsyncCallback callback, object state, string command)
    #else
    public void send_command(string command)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("command", TMessageType.Call, seqid_));
      command_args args = new command_args();
      args.Command = command;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_command()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      command_result result = new command_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "command failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrieveChoice(AsyncCallback callback, object state, string id)
    {
      return send_retrieveChoice(callback, state, id);
    }

    public Choice End_retrieveChoice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrieveChoice();
    }

    #endif

    public Choice retrieveChoice(string id)
    {
      #if !SILVERLIGHT
      send_retrieveChoice(id);
      return recv_retrieveChoice();

      #else
      var asyncResult = Begin_retrieveChoice(null, null, id);
      return End_retrieveChoice(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrieveChoice(AsyncCallback callback, object state, string id)
    #else
    public void send_retrieveChoice(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrieveChoice", TMessageType.Call, seqid_));
      retrieveChoice_args args = new retrieveChoice_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Choice recv_retrieveChoice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrieveChoice_result result = new retrieveChoice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveChoice failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrieveScenario(AsyncCallback callback, object state, string id)
    {
      return send_retrieveScenario(callback, state, id);
    }

    public Scenario End_retrieveScenario(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrieveScenario();
    }

    #endif

    public Scenario retrieveScenario(string id)
    {
      #if !SILVERLIGHT
      send_retrieveScenario(id);
      return recv_retrieveScenario();

      #else
      var asyncResult = Begin_retrieveScenario(null, null, id);
      return End_retrieveScenario(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrieveScenario(AsyncCallback callback, object state, string id)
    #else
    public void send_retrieveScenario(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrieveScenario", TMessageType.Call, seqid_));
      retrieveScenario_args args = new retrieveScenario_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Scenario recv_retrieveScenario()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrieveScenario_result result = new retrieveScenario_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveScenario failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrieveRecommendationVariant(AsyncCallback callback, object state, string id)
    {
      return send_retrieveRecommendationVariant(callback, state, id);
    }

    public RecommendationVariant End_retrieveRecommendationVariant(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrieveRecommendationVariant();
    }

    #endif

    public RecommendationVariant retrieveRecommendationVariant(string id)
    {
      #if !SILVERLIGHT
      send_retrieveRecommendationVariant(id);
      return recv_retrieveRecommendationVariant();

      #else
      var asyncResult = Begin_retrieveRecommendationVariant(null, null, id);
      return End_retrieveRecommendationVariant(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrieveRecommendationVariant(AsyncCallback callback, object state, string id)
    #else
    public void send_retrieveRecommendationVariant(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrieveRecommendationVariant", TMessageType.Call, seqid_));
      retrieveRecommendationVariant_args args = new retrieveRecommendationVariant_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public RecommendationVariant recv_retrieveRecommendationVariant()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrieveRecommendationVariant_result result = new retrieveRecommendationVariant_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveRecommendationVariant failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_persistChoice(AsyncCallback callback, object state, Choice choice)
    {
      return send_persistChoice(callback, state, choice);
    }

    public string End_persistChoice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_persistChoice();
    }

    #endif

    public string persistChoice(Choice choice)
    {
      #if !SILVERLIGHT
      send_persistChoice(choice);
      return recv_persistChoice();

      #else
      var asyncResult = Begin_persistChoice(null, null, choice);
      return End_persistChoice(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_persistChoice(AsyncCallback callback, object state, Choice choice)
    #else
    public void send_persistChoice(Choice choice)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("persistChoice", TMessageType.Call, seqid_));
      persistChoice_args args = new persistChoice_args();
      args.Choice = choice;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_persistChoice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      persistChoice_result result = new persistChoice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "persistChoice failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_persistScenario(AsyncCallback callback, object state, Scenario scenario)
    {
      return send_persistScenario(callback, state, scenario);
    }

    public string End_persistScenario(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_persistScenario();
    }

    #endif

    public string persistScenario(Scenario scenario)
    {
      #if !SILVERLIGHT
      send_persistScenario(scenario);
      return recv_persistScenario();

      #else
      var asyncResult = Begin_persistScenario(null, null, scenario);
      return End_persistScenario(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_persistScenario(AsyncCallback callback, object state, Scenario scenario)
    #else
    public void send_persistScenario(Scenario scenario)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("persistScenario", TMessageType.Call, seqid_));
      persistScenario_args args = new persistScenario_args();
      args.Scenario = scenario;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_persistScenario()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      persistScenario_result result = new persistScenario_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "persistScenario failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_persistRecommendationVariant(AsyncCallback callback, object state, RecommendationVariant recommendationVariant)
    {
      return send_persistRecommendationVariant(callback, state, recommendationVariant);
    }

    public string End_persistRecommendationVariant(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_persistRecommendationVariant();
    }

    #endif

    public string persistRecommendationVariant(RecommendationVariant recommendationVariant)
    {
      #if !SILVERLIGHT
      send_persistRecommendationVariant(recommendationVariant);
      return recv_persistRecommendationVariant();

      #else
      var asyncResult = Begin_persistRecommendationVariant(null, null, recommendationVariant);
      return End_persistRecommendationVariant(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_persistRecommendationVariant(AsyncCallback callback, object state, RecommendationVariant recommendationVariant)
    #else
    public void send_persistRecommendationVariant(RecommendationVariant recommendationVariant)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("persistRecommendationVariant", TMessageType.Call, seqid_));
      persistRecommendationVariant_args args = new persistRecommendationVariant_args();
      args.RecommendationVariant = recommendationVariant;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_persistRecommendationVariant()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      persistRecommendationVariant_result result = new persistRecommendationVariant_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.p13nServiceException) {
        throw result.P13nServiceException;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "persistRecommendationVariant failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updateAuthEntry(AsyncCallback callback, object state, AuthEntry authEntry)
    {
      return send_updateAuthEntry(callback, state, authEntry);
    }

    public void End_updateAuthEntry(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateAuthEntry();
    }

    #endif

    public void updateAuthEntry(AuthEntry authEntry)
    {
      #if !SILVERLIGHT
      send_updateAuthEntry(authEntry);
      recv_updateAuthEntry();

      #else
      var asyncResult = Begin_updateAuthEntry(null, null, authEntry);
      End_updateAuthEntry(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateAuthEntry(AsyncCallback callback, object state, AuthEntry authEntry)
    #else
    public void send_updateAuthEntry(AuthEntry authEntry)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updateAuthEntry", TMessageType.Call, seqid_));
      updateAuthEntry_args args = new updateAuthEntry_args();
      args.AuthEntry = authEntry;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_updateAuthEntry()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateAuthEntry_result result = new updateAuthEntry_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteAuthEntry(AsyncCallback callback, object state, AuthEntry authEntry)
    {
      return send_deleteAuthEntry(callback, state, authEntry);
    }

    public void End_deleteAuthEntry(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteAuthEntry();
    }

    #endif

    public void deleteAuthEntry(AuthEntry authEntry)
    {
      #if !SILVERLIGHT
      send_deleteAuthEntry(authEntry);
      recv_deleteAuthEntry();

      #else
      var asyncResult = Begin_deleteAuthEntry(null, null, authEntry);
      End_deleteAuthEntry(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteAuthEntry(AsyncCallback callback, object state, AuthEntry authEntry)
    #else
    public void send_deleteAuthEntry(AuthEntry authEntry)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAuthEntry", TMessageType.Call, seqid_));
      deleteAuthEntry_args args = new deleteAuthEntry_args();
      args.AuthEntry = authEntry;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteAuthEntry()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAuthEntry_result result = new deleteAuthEntry_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updatePMMLModel(AsyncCallback callback, object state, string id, byte[] xml)
    {
      return send_updatePMMLModel(callback, state, id, xml);
    }

    public void End_updatePMMLModel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updatePMMLModel();
    }

    #endif

    public void updatePMMLModel(string id, byte[] xml)
    {
      #if !SILVERLIGHT
      send_updatePMMLModel(id, xml);
      recv_updatePMMLModel();

      #else
      var asyncResult = Begin_updatePMMLModel(null, null, id, xml);
      End_updatePMMLModel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updatePMMLModel(AsyncCallback callback, object state, string id, byte[] xml)
    #else
    public void send_updatePMMLModel(string id, byte[] xml)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updatePMMLModel", TMessageType.Call, seqid_));
      updatePMMLModel_args args = new updatePMMLModel_args();
      args.Id = id;
      args.Xml = xml;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_updatePMMLModel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updatePMMLModel_result result = new updatePMMLModel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deletePMMLModel(AsyncCallback callback, object state, string id)
    {
      return send_deletePMMLModel(callback, state, id);
    }

    public void End_deletePMMLModel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deletePMMLModel();
    }

    #endif

    public void deletePMMLModel(string id)
    {
      #if !SILVERLIGHT
      send_deletePMMLModel(id);
      recv_deletePMMLModel();

      #else
      var asyncResult = Begin_deletePMMLModel(null, null, id);
      End_deletePMMLModel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deletePMMLModel(AsyncCallback callback, object state, string id)
    #else
    public void send_deletePMMLModel(string id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deletePMMLModel", TMessageType.Call, seqid_));
      deletePMMLModel_args args = new deletePMMLModel_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deletePMMLModel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deletePMMLModel_result result = new deletePMMLModel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["uploadChoiceConfiguration"] = uploadChoiceConfiguration_Process;
      processMap_["saveProfileProperties"] = saveProfileProperties_Process;
      processMap_["replaceProfileProperties"] = replaceProfileProperties_Process;
      processMap_["command"] = command_Process;
      processMap_["retrieveChoice"] = retrieveChoice_Process;
      processMap_["retrieveScenario"] = retrieveScenario_Process;
      processMap_["retrieveRecommendationVariant"] = retrieveRecommendationVariant_Process;
      processMap_["persistChoice"] = persistChoice_Process;
      processMap_["persistScenario"] = persistScenario_Process;
      processMap_["persistRecommendationVariant"] = persistRecommendationVariant_Process;
      processMap_["updateAuthEntry"] = updateAuthEntry_Process;
      processMap_["deleteAuthEntry"] = deleteAuthEntry_Process;
      processMap_["updatePMMLModel"] = updatePMMLModel_Process;
      processMap_["deletePMMLModel"] = deletePMMLModel_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void uploadChoiceConfiguration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      uploadChoiceConfiguration_args args = new uploadChoiceConfiguration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      uploadChoiceConfiguration_result result = new uploadChoiceConfiguration_result();
      try
      {
        try
        {
          result.Success = iface_.uploadChoiceConfiguration(args.XmlPayload);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("uploadChoiceConfiguration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("uploadChoiceConfiguration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void saveProfileProperties_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      saveProfileProperties_args args = new saveProfileProperties_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      saveProfileProperties_result result = new saveProfileProperties_result();
      try
      {
        try
        {
          result.Success = iface_.saveProfileProperties(args.ProfilePropertyValues);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("saveProfileProperties", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("saveProfileProperties", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void replaceProfileProperties_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      replaceProfileProperties_args args = new replaceProfileProperties_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      replaceProfileProperties_result result = new replaceProfileProperties_result();
      try
      {
        try
        {
          result.Success = iface_.replaceProfileProperties(args.ProfilePropertyValues);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("replaceProfileProperties", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("replaceProfileProperties", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void command_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      command_args args = new command_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      command_result result = new command_result();
      try
      {
        try
        {
          result.Success = iface_.command(args.Command);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("command", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("command", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrieveChoice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrieveChoice_args args = new retrieveChoice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrieveChoice_result result = new retrieveChoice_result();
      try
      {
        try
        {
          result.Success = iface_.retrieveChoice(args.Id);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("retrieveChoice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("retrieveChoice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrieveScenario_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrieveScenario_args args = new retrieveScenario_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrieveScenario_result result = new retrieveScenario_result();
      try
      {
        try
        {
          result.Success = iface_.retrieveScenario(args.Id);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("retrieveScenario", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("retrieveScenario", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrieveRecommendationVariant_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrieveRecommendationVariant_args args = new retrieveRecommendationVariant_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrieveRecommendationVariant_result result = new retrieveRecommendationVariant_result();
      try
      {
        try
        {
          result.Success = iface_.retrieveRecommendationVariant(args.Id);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("retrieveRecommendationVariant", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("retrieveRecommendationVariant", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void persistChoice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      persistChoice_args args = new persistChoice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      persistChoice_result result = new persistChoice_result();
      try
      {
        try
        {
          result.Success = iface_.persistChoice(args.Choice);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("persistChoice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("persistChoice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void persistScenario_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      persistScenario_args args = new persistScenario_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      persistScenario_result result = new persistScenario_result();
      try
      {
        try
        {
          result.Success = iface_.persistScenario(args.Scenario);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("persistScenario", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("persistScenario", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void persistRecommendationVariant_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      persistRecommendationVariant_args args = new persistRecommendationVariant_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      persistRecommendationVariant_result result = new persistRecommendationVariant_result();
      try
      {
        try
        {
          result.Success = iface_.persistRecommendationVariant(args.RecommendationVariant);
        }
        catch (P13nServiceException p13nServiceException)
        {
          result.P13nServiceException = p13nServiceException;
        }
        oprot.WriteMessageBegin(new TMessage("persistRecommendationVariant", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("persistRecommendationVariant", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateAuthEntry_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateAuthEntry_args args = new updateAuthEntry_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateAuthEntry_result result = new updateAuthEntry_result();
      try
      {
        iface_.updateAuthEntry(args.AuthEntry);
        oprot.WriteMessageBegin(new TMessage("updateAuthEntry", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateAuthEntry", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAuthEntry_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAuthEntry_args args = new deleteAuthEntry_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAuthEntry_result result = new deleteAuthEntry_result();
      try
      {
        iface_.deleteAuthEntry(args.AuthEntry);
        oprot.WriteMessageBegin(new TMessage("deleteAuthEntry", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteAuthEntry", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updatePMMLModel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updatePMMLModel_args args = new updatePMMLModel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updatePMMLModel_result result = new updatePMMLModel_result();
      try
      {
        iface_.updatePMMLModel(args.Id, args.Xml);
        oprot.WriteMessageBegin(new TMessage("updatePMMLModel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updatePMMLModel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deletePMMLModel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deletePMMLModel_args args = new deletePMMLModel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deletePMMLModel_result result = new deletePMMLModel_result();
      try
      {
        iface_.deletePMMLModel(args.Id);
        oprot.WriteMessageBegin(new TMessage("deletePMMLModel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deletePMMLModel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadChoiceConfiguration_args : TBase
  {
    private byte[] _xmlPayload;

    public byte[] XmlPayload
    {
      get
      {
        return _xmlPayload;
      }
      set
      {
        __isset.xmlPayload = true;
        this._xmlPayload = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool xmlPayload;
    }

    public uploadChoiceConfiguration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                XmlPayload = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("uploadChoiceConfiguration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (XmlPayload != null && __isset.xmlPayload) {
          field.Name = "xmlPayload";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(XmlPayload);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadChoiceConfiguration_args(");
      bool __first = true;
      if (XmlPayload != null && __isset.xmlPayload) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("XmlPayload: ");
        __sb.Append(XmlPayload);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadChoiceConfiguration_result : TBase
  {
    private byte[] _success;
    private P13nServiceException _p13nServiceException;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public uploadChoiceConfiguration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("uploadChoiceConfiguration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadChoiceConfiguration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveProfileProperties_args : TBase
  {
    private List<ProfilePropertyValue> _profilePropertyValues;

    public List<ProfilePropertyValue> ProfilePropertyValues
    {
      get
      {
        return _profilePropertyValues;
      }
      set
      {
        __isset.profilePropertyValues = true;
        this._profilePropertyValues = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool profilePropertyValues;
    }

    public saveProfileProperties_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.List) {
                {
                  ProfilePropertyValues = new List<ProfilePropertyValue>();
                  TList _list23 = iprot.ReadListBegin();
                  for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                  {
                    ProfilePropertyValue _elem25;
                    _elem25 = new ProfilePropertyValue();
                    _elem25.Read(iprot);
                    ProfilePropertyValues.Add(_elem25);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveProfileProperties_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProfilePropertyValues != null && __isset.profilePropertyValues) {
          field.Name = "profilePropertyValues";
          field.Type = TType.List;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ProfilePropertyValues.Count));
            foreach (ProfilePropertyValue _iter26 in ProfilePropertyValues)
            {
              _iter26.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveProfileProperties_args(");
      bool __first = true;
      if (ProfilePropertyValues != null && __isset.profilePropertyValues) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfilePropertyValues: ");
        __sb.Append(ProfilePropertyValues);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class saveProfileProperties_result : TBase
  {
    private int _success;
    private P13nServiceException _p13nServiceException;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public saveProfileProperties_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("saveProfileProperties_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("saveProfileProperties_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class replaceProfileProperties_args : TBase
  {
    private List<ProfilePropertyValue> _profilePropertyValues;

    public List<ProfilePropertyValue> ProfilePropertyValues
    {
      get
      {
        return _profilePropertyValues;
      }
      set
      {
        __isset.profilePropertyValues = true;
        this._profilePropertyValues = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool profilePropertyValues;
    }

    public replaceProfileProperties_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.List) {
                {
                  ProfilePropertyValues = new List<ProfilePropertyValue>();
                  TList _list27 = iprot.ReadListBegin();
                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    ProfilePropertyValue _elem29;
                    _elem29 = new ProfilePropertyValue();
                    _elem29.Read(iprot);
                    ProfilePropertyValues.Add(_elem29);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("replaceProfileProperties_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ProfilePropertyValues != null && __isset.profilePropertyValues) {
          field.Name = "profilePropertyValues";
          field.Type = TType.List;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ProfilePropertyValues.Count));
            foreach (ProfilePropertyValue _iter30 in ProfilePropertyValues)
            {
              _iter30.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("replaceProfileProperties_args(");
      bool __first = true;
      if (ProfilePropertyValues != null && __isset.profilePropertyValues) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfilePropertyValues: ");
        __sb.Append(ProfilePropertyValues);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class replaceProfileProperties_result : TBase
  {
    private int _success;
    private P13nServiceException _p13nServiceException;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public replaceProfileProperties_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("replaceProfileProperties_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("replaceProfileProperties_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class command_args : TBase
  {
    private string _command;

    public string Command
    {
      get
      {
        return _command;
      }
      set
      {
        __isset.command = true;
        this._command = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool command;
    }

    public command_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                Command = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("command_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Command != null && __isset.command) {
          field.Name = "command";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("command_args(");
      bool __first = true;
      if (Command != null && __isset.command) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Command: ");
        __sb.Append(Command);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class command_result : TBase
  {
    private string _success;
    private P13nServiceException _p13nServiceException;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public command_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("command_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("command_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveChoice_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public retrieveChoice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveChoice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveChoice_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveChoice_result : TBase
  {
    private Choice _success;
    private P13nServiceException _p13nServiceException;

    public Choice Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public retrieveChoice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Choice();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveChoice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveChoice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveScenario_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public retrieveScenario_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveScenario_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveScenario_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveScenario_result : TBase
  {
    private Scenario _success;
    private P13nServiceException _p13nServiceException;

    public Scenario Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public retrieveScenario_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Scenario();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveScenario_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveScenario_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveRecommendationVariant_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public retrieveRecommendationVariant_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveRecommendationVariant_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveRecommendationVariant_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveRecommendationVariant_result : TBase
  {
    private RecommendationVariant _success;
    private P13nServiceException _p13nServiceException;

    public RecommendationVariant Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public retrieveRecommendationVariant_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RecommendationVariant();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveRecommendationVariant_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveRecommendationVariant_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class persistChoice_args : TBase
  {
    private Choice _choice;

    public Choice Choice
    {
      get
      {
        return _choice;
      }
      set
      {
        __isset.choice = true;
        this._choice = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool choice;
    }

    public persistChoice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.Struct) {
                Choice = new Choice();
                Choice.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("persistChoice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Choice != null && __isset.choice) {
          field.Name = "choice";
          field.Type = TType.Struct;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          Choice.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("persistChoice_args(");
      bool __first = true;
      if (Choice != null && __isset.choice) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Choice: ");
        __sb.Append(Choice== null ? "<null>" : Choice.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class persistChoice_result : TBase
  {
    private string _success;
    private P13nServiceException _p13nServiceException;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public persistChoice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("persistChoice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("persistChoice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class persistScenario_args : TBase
  {
    private Scenario _scenario;

    public Scenario Scenario
    {
      get
      {
        return _scenario;
      }
      set
      {
        __isset.scenario = true;
        this._scenario = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool scenario;
    }

    public persistScenario_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.Struct) {
                Scenario = new Scenario();
                Scenario.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("persistScenario_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Scenario != null && __isset.scenario) {
          field.Name = "scenario";
          field.Type = TType.Struct;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          Scenario.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("persistScenario_args(");
      bool __first = true;
      if (Scenario != null && __isset.scenario) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scenario: ");
        __sb.Append(Scenario== null ? "<null>" : Scenario.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class persistScenario_result : TBase
  {
    private string _success;
    private P13nServiceException _p13nServiceException;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public persistScenario_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("persistScenario_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("persistScenario_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class persistRecommendationVariant_args : TBase
  {
    private RecommendationVariant _recommendationVariant;

    public RecommendationVariant RecommendationVariant
    {
      get
      {
        return _recommendationVariant;
      }
      set
      {
        __isset.recommendationVariant = true;
        this._recommendationVariant = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool recommendationVariant;
    }

    public persistRecommendationVariant_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.Struct) {
                RecommendationVariant = new RecommendationVariant();
                RecommendationVariant.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("persistRecommendationVariant_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RecommendationVariant != null && __isset.recommendationVariant) {
          field.Name = "recommendationVariant";
          field.Type = TType.Struct;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          RecommendationVariant.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("persistRecommendationVariant_args(");
      bool __first = true;
      if (RecommendationVariant != null && __isset.recommendationVariant) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecommendationVariant: ");
        __sb.Append(RecommendationVariant== null ? "<null>" : RecommendationVariant.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class persistRecommendationVariant_result : TBase
  {
    private string _success;
    private P13nServiceException _p13nServiceException;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public P13nServiceException P13nServiceException
    {
      get
      {
        return _p13nServiceException;
      }
      set
      {
        __isset.p13nServiceException = true;
        this._p13nServiceException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool p13nServiceException;
    }

    public persistRecommendationVariant_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                P13nServiceException = new P13nServiceException();
                P13nServiceException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("persistRecommendationVariant_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.p13nServiceException) {
          if (P13nServiceException != null) {
            field.Name = "P13nServiceException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            P13nServiceException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("persistRecommendationVariant_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (P13nServiceException != null && __isset.p13nServiceException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("P13nServiceException: ");
        __sb.Append(P13nServiceException== null ? "<null>" : P13nServiceException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateAuthEntry_args : TBase
  {
    private AuthEntry _authEntry;

    public AuthEntry AuthEntry
    {
      get
      {
        return _authEntry;
      }
      set
      {
        __isset.authEntry = true;
        this._authEntry = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool authEntry;
    }

    public updateAuthEntry_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.Struct) {
                AuthEntry = new AuthEntry();
                AuthEntry.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateAuthEntry_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthEntry != null && __isset.authEntry) {
          field.Name = "authEntry";
          field.Type = TType.Struct;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          AuthEntry.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateAuthEntry_args(");
      bool __first = true;
      if (AuthEntry != null && __isset.authEntry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthEntry: ");
        __sb.Append(AuthEntry== null ? "<null>" : AuthEntry.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateAuthEntry_result : TBase
  {

    public updateAuthEntry_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateAuthEntry_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateAuthEntry_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAuthEntry_args : TBase
  {
    private AuthEntry _authEntry;

    public AuthEntry AuthEntry
    {
      get
      {
        return _authEntry;
      }
      set
      {
        __isset.authEntry = true;
        this._authEntry = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool authEntry;
    }

    public deleteAuthEntry_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.Struct) {
                AuthEntry = new AuthEntry();
                AuthEntry.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteAuthEntry_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthEntry != null && __isset.authEntry) {
          field.Name = "authEntry";
          field.Type = TType.Struct;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          AuthEntry.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteAuthEntry_args(");
      bool __first = true;
      if (AuthEntry != null && __isset.authEntry) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthEntry: ");
        __sb.Append(AuthEntry== null ? "<null>" : AuthEntry.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAuthEntry_result : TBase
  {

    public deleteAuthEntry_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteAuthEntry_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteAuthEntry_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updatePMMLModel_args : TBase
  {
    private string _id;
    private byte[] _xml;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public byte[] Xml
    {
      get
      {
        return _xml;
      }
      set
      {
        __isset.xml = true;
        this._xml = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool xml;
    }

    public updatePMMLModel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case -2:
              if (field.Type == TType.String) {
                Xml = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updatePMMLModel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Xml != null && __isset.xml) {
          field.Name = "xml";
          field.Type = TType.String;
          field.ID = -2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Xml);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updatePMMLModel_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Xml != null && __isset.xml) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Xml: ");
        __sb.Append(Xml);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updatePMMLModel_result : TBase
  {

    public updatePMMLModel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updatePMMLModel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updatePMMLModel_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePMMLModel_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public deletePMMLModel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case -1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePMMLModel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = -1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePMMLModel_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deletePMMLModel_result : TBase
  {

    public deletePMMLModel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deletePMMLModel_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deletePMMLModel_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
